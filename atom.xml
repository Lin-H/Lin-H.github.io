<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Lin-H's Blog]]></title>
  <subtitle><![CDATA[Share some experience and thoughts]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lin-h.com/"/>
  <updated>2016-01-20T14:31:33.285Z</updated>
  <id>http://lin-h.com/</id>
  
  <author>
    <name><![CDATA[Lin-H]]></name>
    <email><![CDATA[lh04667649@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Json Web Token身份认证]]></title>
    <link href="http://lin-h.com/2016/01/20/json-web-token/"/>
    <id>http://lin-h.com/2016/01/20/json-web-token/</id>
    <published>2016-01-20T14:31:33.285Z</published>
    <updated>2016-01-20T14:31:33.285Z</updated>
    <content type="html"><![CDATA[<p>用户身份认证一般有5种方式</p>
<ul>
<li>HTTP Basic authentication<br>
在发送请求时在HTTP头中加入<code>authentication</code>字段，将用<code>Base64</code>编码的用户名和密码作为值，每次发送请求的时候都要发送用户名和密码，实现比较简单。</li>
<li>Cookies<br>
向后台发送用户名和密码，在用户名和密码通过验证后，保存返回的<code>Cookie</code>作为用户已经登录的凭证，每次请求时附带这个<code>Cookie</code></li>
<li>Signatures<br>
用户拿到服务器给的私钥，在发送请求前，将整个请求使用私钥来加密，发送的将是一串加密信息，此方式只适用于API</li>
<li>One-Time Passwords<br>
一次一密，每次登录时使用不同的密码，一般由服务端通过邮件将密码发给用户，这种登录方式比较繁琐</li>
<li>JSON Web Token<br>
用户发送按照约定，向服务端发送<code>Header</code>、<code>Payload</code>和<code>Signature</code>，并包含认证信息(密码)，验证通过后服务端返回一个<code>token</code>，之后用户使用该<code>token</code>作为登录凭证，适合于移动端和api</li>
</ul>
<a id="more"></a>
<p>因为前后端分离的缘故，现在的后台多数只提供数据部分，一般使用<code>JSON</code>格式，所以<code>JSON Web Token</code>是比较流行的认证方式。</p>
<p><code>JWT</code>的认证方式相比其他的认证方式有一下优点：</p>
<ul>
<li>信息可用HMAC或RSA加密，信息安全性较高</li>
<li>生成的密文短，密文可以包含所有用户信息，认证过期时间或用户权限等自定义信息</li>
<li>适合用于手机应用和单页面应用的身份认证</li>
<li>使用灵活，一旦取得了<code>JWT</code>，可以通过POST方式或添加入HTTP头中发送</li>
</ul>
<h3 id="jwt结构">JWT结构</h3>
<p><code>JWT</code>包含3个部分</p>
<ul>
<li>Header (头部)</li>
<li>Payload (负载)</li>
<li>Signature (签名)</li>
</ul>
<h4 id="header">Header</h4>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">alg</span>": <span class="value"><span class="string">"HS256"</span></span>,</span><br><span class="line">  "<span class="attribute">typ</span>": <span class="value"><span class="string">"JWT"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>JWT</code>的头部是固定的，<code>alg</code>是算法的意思表示该<code>JWT</code>使用的是何种算法加密。<code>typ</code>字段值是固定的<code>JWT</code></p>
<h4 id="payload">Payload</h4>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">sub</span>": <span class="value"><span class="string">"1234567890"</span></span>,</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"John Doe"</span></span>,</span><br><span class="line">  "<span class="attribute">admin</span>": <span class="value"><span class="literal">true</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>负载部分就是具体的认证信息，通过修改这部分的内容来控制认证信息如用户权限等。除了一些保留字段<code>exp</code>(过期时间)、<code>aud</code>、<code>iss</code>等外，使用方法跟普通Json一样。</p>
<h4 id="signature">Signature</h4>
<p>签名，也就是密钥，用来保证密文的安全强度</p>
<p>以上3部分都经过<a href="">Base64Url</a>处理后用<code>.</code>分隔再使用<code>HMAC SHA256</code>或<code>RSA</code>加密为一段字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">"."</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure>
<p>具体的使用在<a href="http://jwt.io/" target="_blank" rel="external">JWT.IO</a>上有演示</p>
<h3 id="jwt使用流程">JWT使用流程</h3>
<p><img src="http://linhsblog-10013469.image.myqcloud.com/images/jwt-diagram.png" alt="jwt diagram"></p>
<p>客户端POST用户名和密码到服务端，若对安全要求较高可以是加密后的用户名或密码，服务端把拿到的用户名和密码与数据库中的对比，若相同则按照上面的流程生成<code>JWT</code>，然后返回客户端。在此之后客户端的所有请求，可以在Authorization HTTP头或POST数据中附带得到的<code>JWT</code>。服务端验证<code>JWT</code>并解析出Payload部分，以此来判断用户的权限。</p>
<p><code>JWT</code>的使用方法很简单，就拿node.js的包<code>node-jsonwebtoken</code>来说加密和验证就两个函数<code>jwt.sign</code>，<code>jwt.verify</code>并且<a href="http://jwt.io" target="_blank" rel="external">jwt.io</a>中提供了很多语言的<code>JWT</code>包。</p>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="http://jwt.io/introduction/" target="_blank" rel="external">http://jwt.io/introduction/</a></li>
<li><a href="http://jwt.io/#libraries" target="_blank" rel="external">http://jwt.io/#libraries</a></li>
<li><a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="external">node-jsonwebtoken</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>用户身份认证一般有5种方式</p>
<ul>
<li>HTTP Basic authentication<br/>
在发送请求时在HTTP头中加入<code>authentication</code>字段，将用<code>Base64</code>编码的用户名和密码作为值，每次发送请求的时候都要发送用户名和密码，实现比较简单。</li>
<li>Cookies<br/>
向后台发送用户名和密码，在用户名和密码通过验证后，保存返回的<code>Cookie</code>作为用户已经登录的凭证，每次请求时附带这个<code>Cookie</code></li>
<li>Signatures<br/>
用户拿到服务器给的私钥，在发送请求前，将整个请求使用私钥来加密，发送的将是一串加密信息，此方式只适用于API</li>
<li>One-Time Passwords<br/>
一次一密，每次登录时使用不同的密码，一般由服务端通过邮件将密码发给用户，这种登录方式比较繁琐</li>
<li>JSON Web Token<br/>
用户发送按照约定，向服务端发送<code>Header</code>、<code>Payload</code>和<code>Signature</code>，并包含认证信息(密码)，验证通过后服务端返回一个<code>token</code>，之后用户使用该<code>token</code>作为登录凭证，适合于移动端和api</li>
</ul>]]>
    
    </summary>
    
      <category term="Node.js" scheme="http://lin-h.com/tags/Node-js/"/>
    
      <category term="Node.js" scheme="http://lin-h.com/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[内滚动]]></title>
    <link href="http://lin-h.com/2015/12/27/inner-scroll/"/>
    <id>http://lin-h.com/2015/12/27/inner-scroll/</id>
    <published>2015-12-27T05:44:45.000Z</published>
    <updated>2016-01-15T06:40:59.363Z</updated>
    <content type="html"><![CDATA[<p>内滚动是一种布局，将传统的网页改造成类似于桌面软件的布局。像现在的酷我音乐盒的主体界面就是一个内滚动布局QQ音乐也是，将浏览器的滚动条用<code>overflow: hidden</code>隐藏，再用HTML和CSS画一个滚动条出来，通过JavaScript来处理滚动事件。这么做的好处一是增强用户体验，网页能有客户端的体验；二是可以自定义滚动条。下面我是用Vue做了个内滚动组件，用来简单介绍内滚动的实现。</p>
<a id="more"></a>
<p>使用例子(省去了部分标签和代码)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"height: 200px;position: relative"</span> <span class="attribute">class</span>=<span class="value">"scroll-view"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">scroll</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"scroll-panel"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>1<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>2<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>3<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>4<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>5<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>6<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>7<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>8<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>9<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">p</span>&gt;</span>10<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">scroll</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">        Vue.component(<span class="string">'scroll'</span>, scroll);</span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">'body'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>scroll-view</code>是滚动条的视窗就是能看到的部分，需要设置<code>position</code>为<code>relative</code>或<code>absolute</code>，<code>scroll-panel</code>是滚动的内容。使用时将需要滚动的内容放入自定义标签<code>scroll</code>内即可</p>
<p>当时写这个内滚动组件的时候参考了<code>jQuery</code>的插件<code>jscrollpanel</code>。在HTML结构上类似，并做了简化。使用两个div包裹滚动的内容，使用CSS的<code>top</code>来实现滚动，再添加两个div用于自定义滚动条</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    template: <span class="string">`</span><br><span class="line">    &lt;div class="vue-scroll"&gt;</span><br><span class="line">        &lt;div class="v-scroll-panel" :style="&#123;top: scrollPanelTop + 'px'&#125;"&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="v-scroll-bar" v-show="isShow"&gt;</span><br><span class="line">        &lt;div class="v-scroll-block" @mousedown="dragStart" :style="&#123;top: scrollBlockTop + 'px', height: scrollBlockHeight + 'px'&#125;" :class="&#123;dragging: dragInfo.dragging&#125;" @mousemove="dragging"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            scrollBlockTop: <span class="number">0</span>,<span class="comment">//滑块距离顶部高度</span></span><br><span class="line">            dragInfo: &#123;</span><br><span class="line">                dragging: <span class="literal">false</span>,</span><br><span class="line">                Y: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            scrollableHeight: <span class="number">0</span>,<span class="comment">//滑动视窗高度</span></span><br><span class="line">            scrollPanelHeight: <span class="number">0</span><span class="comment">//滑动区域高度</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        scrollBlockHeight() &#123;<span class="comment">//滑动块长度</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.scrollableHeight * <span class="keyword">this</span>.scrollableHeight / <span class="keyword">this</span>.scrollPanelHeight;</span><br><span class="line">        &#125;,</span><br><span class="line">        scrollPanelTop() &#123;<span class="comment">//实现滚动</span></span><br><span class="line">            <span class="keyword">return</span> -~~(<span class="keyword">this</span>.scrollBlockTop * <span class="keyword">this</span>.scrollPanelHeight / <span class="keyword">this</span>.scrollableHeight);</span><br><span class="line">        &#125;,</span><br><span class="line">        isShow() &#123;<span class="comment">//滚动内容超出视窗范围时显示滚动条</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.scrollableHeight &lt; <span class="keyword">this</span>.scrollPanelHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ready() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$el.parentNode.style.overflow = <span class="string">'hidden'</span>;</span><br><span class="line">        <span class="keyword">this</span>.scrollPanelHeight = <span class="keyword">this</span>.$el.nextElementSibling.clientHeight;</span><br><span class="line">        <span class="keyword">this</span>.scrollableHeight = <span class="keyword">this</span>.$el.parentNode.clientHeight;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isShow) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$el.parentNode.onwheel = (e) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> cal = <span class="keyword">this</span>.scrollBlockTop + -e.wheelDeltaY / <span class="number">4</span> * <span class="keyword">this</span>.scrollableHeight / <span class="keyword">this</span>.scrollPanelHeight;</span><br><span class="line">                <span class="comment">//限制滚动块滚动范围</span></span><br><span class="line">                <span class="keyword">if</span> (cal &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cal = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cal &gt;= <span class="keyword">this</span>.scrollableHeight - <span class="keyword">this</span>.scrollBlockHeight) &#123;</span><br><span class="line">                    cal = <span class="keyword">this</span>.scrollableHeight - <span class="keyword">this</span>.scrollBlockHeight;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.scrollBlockTop = cal;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        dragStart(e) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dragInfo.dragging = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.dragInfo.Y = e.clientY + <span class="built_in">document</span>.body.scrollTop - <span class="keyword">this</span>.scrollBlockTop;</span><br><span class="line">            <span class="comment">//添加document事件，是为了能使拖动滑块时鼠标离开滚动区域也能拖动滑块</span></span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, <span class="keyword">this</span>.dragging.bind(<span class="keyword">this</span>));</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, <span class="keyword">this</span>.dragEnd.bind(<span class="keyword">this</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        dragging(e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.dragInfo.dragging) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> cal = e.clientY + <span class="built_in">document</span>.body.scrollTop - <span class="keyword">this</span>.dragInfo.Y;</span><br><span class="line">            <span class="keyword">if</span> (cal &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                cal = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cal &gt;= <span class="keyword">this</span>.scrollableHeight - <span class="keyword">this</span>.scrollBlockHeight) &#123;</span><br><span class="line">                cal = <span class="keyword">this</span>.scrollableHeight - <span class="keyword">this</span>.scrollBlockHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.scrollBlockTop = cal;</span><br><span class="line">        &#125;,</span><br><span class="line">        dragEnd() &#123;</span><br><span class="line">            <span class="keyword">this</span>.dragInfo.dragging = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    events: &#123;</span><br><span class="line">        resize() &#123;</span><br><span class="line">            <span class="keyword">this</span>.scrollPanelHeight = <span class="keyword">this</span>.$el.nextElementSibling.clientHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="string">'dragInfo.dragging'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">                <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, <span class="keyword">this</span>.dragging.bind(<span class="keyword">this</span>));</span><br><span class="line">                <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, <span class="keyword">this</span>.dragEnd.bind(<span class="keyword">this</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>首先是计算滑块的长度，其实滚动条可以看成是缩小的浏览器窗口，滑块就是当前浏览器窗口在整个页面中的位置，所以只需要按照比例设置。<code>scrollPanelHeight / scrollableHeight</code>等于 <code>滚动条长度/滑块长度</code>。在滚动时，滚动的距离也是通过这个比例来决定。在处理鼠标滚动事件时,需要注意浏览器兼容，<code>IE</code>,<code>Firefox</code>和<code>Chrome</code>都不一样。将<code>scroll-panel</code>的<code>top</code>属性设置为负值，来实现向下滚动的效果。下面是一个用上面代码实现的一个例子,请使用<code>Chrome</code>或<code>webkit</code>内核浏览器查看</p>

<div style="height: 200px;position: relative;background-color: #f1f1f1;" class="scroll-view">
    <scroll>
        <div class="scroll-panel" style="background-color: #f1f1f1;">
            <p>1</p>
            <p>2</p>
            <p>3</p>
            <p>4</p>
            <p>5</p>
            <p>6</p>
            <p>7</p>
            <p>8</p>
            <p>9</p>
            <p>10</p>
        </div>
    </scroll>
</div>
<script src="./scroll" type="text/javascript"></script>

]]></content>
    <summary type="html">
    <![CDATA[<p>内滚动是一种布局，将传统的网页改造成类似于桌面软件的布局。像现在的酷我音乐盒的主体界面就是一个内滚动布局QQ音乐也是，将浏览器的滚动条用<code>overflow: hidden</code>隐藏，再用HTML和CSS画一个滚动条出来，通过JavaScript来处理滚动事件。这么做的好处一是增强用户体验，网页能有客户端的体验；二是可以自定义滚动条。下面我是用Vue做了个内滚动组件，用来简单介绍内滚动的实现。</p>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://lin-h.com/tags/Javascript/"/>
    
      <category term="Vue" scheme="http://lin-h.com/tags/Vue/"/>
    
      <category term="Javascript" scheme="http://lin-h.com/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[体验Angular2]]></title>
    <link href="http://lin-h.com/2015/12/19/try-angular2/"/>
    <id>http://lin-h.com/2015/12/19/try-angular2/</id>
    <published>2015-12-19T14:42:59.000Z</published>
    <updated>2016-01-20T14:33:30.561Z</updated>
    <content type="html"><![CDATA[<p>前几天，<code>Angular2</code>终于发布了beta版本，API基本稳定了，我觉得是时候体验一下了。所以我决定用<code>Angular2</code>做一个提示框组件来试试。来看看新的<code>Angular</code>有什么优缺点。</p>
<a id="more"></a>
<h2 id="安装">安装</h2>
<p>根据官方的<a href="https://angular.io/docs/ts/latest/quickstart.html" target="_blank" rel="external">5 MIN QUICKSTART</a>教程可以很快地搭建起开发环境。不得不说，<code>Angular2</code>的依赖还真多，虽然有些是为了兼容其他浏览器的，但真正的主体部分也不小还需要依赖<code>rxjs</code>。我这里使用的是<code>Typescript</code>来编写，需要对<code>Typescript</code>的编译器配置一下，全都按照官方的来就行。当然也可以选择<code>ES5</code>或<code>ES6</code>。</p>
<p>使用<code>npm install</code>安装完成后再运行<code>npm start</code>就会自动编译运行了，有改动的时候会自动刷新页面，很方便。</p>
<h2 id="提示框组件">提示框组件</h2>
<p>为了简单起见，我直接以提示框组件为根节点启动,并添加一个按钮来显示提示框</p>
<p><code>app.component.ts</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'tip'</span>,</span><br><span class="line">    template: <span class="string">`&lt;div class="tip" [ngStyle]="&#123;'display': isShow?'block':'none', 'opacity': opacity&#125;"&gt;</span><br><span class="line">        &lt;div class="content"&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;text&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button (click)="show()"&gt;show&lt;/button&gt;`</span>,</span><br><span class="line">    styles: [<span class="string">`.tip &#123;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 30px;</span><br><span class="line">            left: 400px;</span><br><span class="line">            background-color: #ccc;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            transition: opacity .4s ease;</span><br><span class="line">        &#125;</span><br><span class="line">        .content &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        .content p &#123;</span><br><span class="line">            margin: 10px 6px;</span><br><span class="line">        &#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TipComponent</span> </span>&#123;</span><br><span class="line">    public text: <span class="built_in">String</span>;</span><br><span class="line">    private isShow: <span class="built_in">Boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    private opacity: <span class="built_in">Number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    show(text: <span class="built_in">String</span> = <span class="string">"This is default text"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">        <span class="keyword">this</span>.isShow = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            self.opacity = <span class="number">1</span>;</span><br><span class="line">        &#125;, <span class="number">10</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            self.opacity = <span class="number">0</span>;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                self.isShow = <span class="literal">false</span>;</span><br><span class="line">            &#125;, <span class="number">400</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>boot.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrap&#125;    from <span class="string">'angular2/platform/browser'</span></span><br><span class="line"><span class="keyword">import</span> &#123;TipComponent&#125; from <span class="string">'./app.component'</span></span><br><span class="line"></span><br><span class="line">bootstrap(TipComponent);</span><br></pre></td></tr></table></figure>
<p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Angular 2 QuickStart<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 1. Load libraries --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2. Configure SystemJS --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">		System.config(&#123;</span><br><span class="line">        packages: &#123;</span><br><span class="line">          app: &#123;</span><br><span class="line">            format: <span class="string">'register'</span>,</span><br><span class="line">            defaultExtension: <span class="string">'js'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      System.import(<span class="string">'app/boot'</span>)</span><br><span class="line">            .then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br><span class="line">	</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3. Display the application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">tip</span>&gt;</span><span class="tag">&lt;/<span class="title">tip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上就是代码，还是比较简单的，但可能是<code>Angular2</code>刚公测，文档还不完善，有些功能不知道该用什么函数。</p>
<p>提示框组件的功能，点击按钮后就弹出一个提示框，传入text变量来改变显示的文本。这个组件的话我是用<code>Vue</code>来做的，显示和消失的时候都会有过渡动画，这里我的过渡属性是<code>opacity</code>，第一个问题来了，一开始提示框<code>display: none; opacity: 0</code>，要显示的时候将<code>display</code>改为<code>block</code>，<code>opacity</code>改为<code>1</code>以触发过渡效果，如果两个属性同时修改不会有过渡效果出现，需要用<code>setTimeout</code>来延迟<code>opacity</code>属性的修改，保证<code>display</code>已经被修改为<code>block</code>，这样才会有过渡效果。同样的在提示框消失时修改顺序要倒过来，先改<code>opacity</code>再改<code>display</code>。简而言之就是在为隐藏元素添加过渡效果的时候，需要自己手动处理，<code>Vue</code>的话就不需要，通过<code>v-show</code>和<code>transition</code>属性就能轻松添加过渡效果，不过我认为在正式版本<code>Angular2</code>应该会添加类似的功能。</p>
<p>另一个问题就是弹出的提示框需要水平居中，因为提示框的内容是变化的，所以每次显示的时候都需要计算<code>left</code>来达到居中效果。在<code>Vue</code>中可以通过<code>this.$el</code>来获取提示框的DOM，但在<code>Angular2</code>中我就不知道该怎么做了，翻了一遍官方文档，暂时没找到相关的api。</p>
<p>除此之外，类似<code>Vue</code>的<code>&lt;slot&gt;</code>内容分发功能，我在<code>Angular2</code>中找到了类似的<code>&lt;ng-content&gt;</code>但并不是我想要的效果，而且在文档中也找不到。本来是想作个内滚动组件的，在<code>Vue</code>中使用<code>&lt;slot&gt;</code>很容易做出内滚动组件。</p>
<p>总得来说，这一次尝试，就现在的<code>Angular2</code>版本来说并没有让我感觉强大，期待正式2.0版本能使功能、文档都完善。另一个就是<code>Angular2</code>的体积很大，毕竟包含了很多功能，这在网页载入速度上就会有劣势了，所以我觉得就现在的<code>Angular2</code>来说，比较适合用来开发大型的，企业级的网页应用，或者直接嵌入软件客户端中。但毕竟没有成熟，能否像<code>Angular1</code>那样成功很难说，因为与其他框架对比之下我觉得<code>Vue</code>和<code>React</code>的方案更优秀。看来短期之内我还是先专注与<code>Vue</code>和<code>React</code>吧 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前几天，<code>Angular2</code>终于发布了beta版本，API基本稳定了，我觉得是时候体验一下了。所以我决定用<code>Angular2</code>做一个提示框组件来试试。来看看新的<code>Angular</code>有什么优缺点。</p>]]>
    
    </summary>
    
      <category term="Angular2" scheme="http://lin-h.com/tags/Angular2/"/>
    
      <category term="Javascript" scheme="http://lin-h.com/tags/Javascript/"/>
    
      <category term="Javascript" scheme="http://lin-h.com/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[广州11月份实习]]></title>
    <link href="http://lin-h.com/2015/12/12/2015-november-summary/"/>
    <id>http://lin-h.com/2015/12/12/2015-november-summary/</id>
    <published>2015-12-12T15:16:37.000Z</published>
    <updated>2016-01-15T06:40:59.336Z</updated>
    <content type="html"><![CDATA[<p>2015年11月份，仍在广州实习。9月份时候的实习做的是Node.js开发，现在是Javascript工程师，也就是前端了。工作的内容也不难，但接触到的东西还是很有收获的。了解到公司的内部结构，使用的技术，真实的产品。尤其是使用浏览器内核来开发软件，解决了我好几年前关于软件开发的疑惑。还有就是MVVM框架Vue.js的使用，这个是主要内容了。</p>
<a id="more"></a>
<p>第一天去的时候，主要是学习内部的公用库，sass和js。关于css预处理器的选择有<code>Sass</code>，<code>Less</code>，<code>Stylus</code>，其实本质上都差不多基本就是学会了一个就能使用这3种，有的是细微差别，如果你不喜欢写分号，喜欢Python那种缩进形式的我推荐<code>Stylus</code>。至于我自己的话就是比较倾向于<code>Sass</code>了，以前都是使用Ruby来进行编译，但现在随着<code>Node.js</code>的崛起，也有了<code>node-sass</code>，就连我现在的这个博客也从<code>Jekyll</code>迁移到了<code>Hexo</code>上，为的是统一工具链 :)</p>
<p>js部分的话使用的还是传统的<code>jQuery</code>和事件监听(请原谅我说jQuery很传统)，开发流程都是集中在给DOM绑定事件，触发事件后修改DOM，当时读代码的时候确实头晕，往往需要结合已有的项目去读，不然不了解HTML的结构不知道某些函数操作是干嘛的，项目一旦复杂起来维护就比较麻烦了。</p>
<p>而且jQuery的很多常用函数都能使用原生js来实现，<code>addEventListener</code>,<code>removeEventListener</code>,'document.querySelector'等等。所以我们前端就开始了迁移工作，使用<code>webpack</code>和<code>Vue.js</code>来改写。</p>
<p><code>webpack</code>是个很棒的打包工具，也自带有一些插件，可以完成代码压缩，公共库打包，css文件单独抽取等操作，但类似于sprite图片的合并就需要<code>gulp</code>来构建了，更何况<code>gulp</code>有可以调用<code>webpack</code>的插件。除此之外，还使用ES6来开发，通过<code>Babel</code>来编译，以<code>Vue</code>组件的形式来编写代码css、HTML、Javascript都写在同一个文件中，通过<code>vue-loader</code>来打包，所以整个的工具链是<code>Vue</code> -&gt; <code>Babel</code> -&gt; <code>webpack</code> -&gt; <code>gulp</code>。</p>
<p>唯一让我不习惯的就是,使用的版本控制系统是<code>SVN</code>，感觉真是不好用，还是<code>Git</code>大法好。好像使用的原因是因为<code>SVN</code>比较容易部署，装个软件就行了，<code>SVN</code>上传代码慢，分支功能差，合并冲突的功能也不好，谁手快，谁就不用解决冲突。真的感觉<code>Git</code>甩<code>SVN</code>几条街。</p>
<h2 id="vue"><a href="http://vuejs.org/" target="_blank" rel="external">Vue</a></h2>
<p><img src="components.png" alt=""></p>
<p>至于<code>Vue</code>是什么我就不多说了，轻量的MVVM框架。为什么我们选用了<code>Vue</code>而没有选择<code>Angular.js</code>，<code>Backbone</code>，<code>Ember</code>之类的？最大原因是因为简单，容易学会。相比与<code>Angular.js</code>来说<code>Vue</code>很轻量，它并没有包含特别多的功能，当你需要其他功能如ajax的时候，通过插件的形式加载进去。而且比<code>Angular.js</code>更容易上手，说实话，我当初开始接触<code>Angular.js</code>的时候真的不觉得容易。而且<code>Angular.js</code>与<code>Vue</code>最大的不同是<code>Vue</code>更容易组件化，代码量也少。整个页面是就是一棵组件组成的树。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并注册一个自定义组件</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;Hello &#123;&#123;name&#125;&#125;, This is a custom &#123;&#123;comp&#125;&#125;!&lt;/div&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//内部的变量，可以绑定到模板上</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      comp: <span class="string">'component'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;<span class="comment">//从外部传进来的属性</span></span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'Lin-H'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个根节点来挂在组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'body'</span>,<span class="comment">//根节点的作用范围是整个body标签</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">my-component</span>&gt;</span><span class="tag">&lt;<span class="title">my-component</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 会被渲染成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span>Hello Lin-H, This is a custom component!<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以我平时的工作主要的就是将一些用的比较多的功能组件化，比如表格组件，页面内滚动组件，弹出框组件等。总的来说<code>Vue</code>可以满足很多需求，并不会因为自身小，造成功能弱。</p>
<p>我个人认为<code>Vue</code>是要比<code>Angular.js</code>要优秀的，不过<code>Angular2</code>还是值得期待的。</p>
<h2 id="software">Software</h2>
<p>很多年前，我一直有个疑问，像<code>QQ</code>客户端这种软件是如何编写的，聊天对话框，用户界面都做得很好看，难道都是通过<code>C#</code>来写的吗？但是当我接触<code>C#</code>，用它来写UI的时候，感觉也并不是那么容易，那么得心应手。直到我来实习才发现，这些软件是运行在浏览器上的，准确来说是软件中嵌入了一个浏览器内核，然后使用网页的技术来编写客户端软件，不仅简单，而且通过CSS3也能做出足够美观的界面。</p>
<p>有个例子是<code>Microsoft</code>的开源编辑器<a href="https://code.visualstudio.com/" target="_blank" rel="external">Visua Studio Code</a>，就是使用了这种技术，使用的是<a href="electron.atom.io">Electron</a>，<code>chromium</code>内核。
<img src="vscode.png" alt="">
在用户看来，这就是一款软件，并不知道这其实是一个网页。如果去掉内核自带的边框，就只能看到网页中<code>body</code>标签内的部分，标题栏的最小化，关闭按钮都会隐藏，然后自己使用HTML在顶部做出一个“标题栏”。这么做的好处是你可以完全自定义整个窗口，包括标题栏和关闭按钮使整个软件的风格统一，而且还能使用<code>Node.js</code>的模块，无论是本地模块还是第三方模块都能提供给这个“浏览器”使用，这意味着你可以编写出功能丰富的“网页”来。</p>
<p>但这种开发模式也有缺点，最明显的就是整个软件的体积会比较大，因为包含了内核。而且渲染性能比较低，因为在浏览器中遇到大量需要不断重绘的网页，都会很卡。但对于日常软件来说完全没有问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2015年11月份，仍在广州实习。9月份时候的实习做的是Node.js开发，现在是Javascript工程师，也就是前端了。工作的内容也不难，但接触到的东西还是很有收获的。了解到公司的内部结构，使用的技术，真实的产品。尤其是使用浏览器内核来开发软件，解决了我好几年前关于软件开发的疑惑。还有就是MVVM框架Vue.js的使用，这个是主要内容了。</p>]]>
    
    </summary>
    
      <category term="life" scheme="http://lin-h.com/tags/life/"/>
    
      <category term="Others" scheme="http://lin-h.com/categories/Others/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS3 Animation]]></title>
    <link href="http://lin-h.com/2015/11/11/css3-animation/"/>
    <id>http://lin-h.com/2015/11/11/css3-animation/</id>
    <published>2015-11-11T13:22:45.000Z</published>
    <updated>2016-01-15T06:40:59.361Z</updated>
    <content type="html"><![CDATA[<h2 id="css3-动画">CSS3 动画</h2>
<p>CSS3 动画不需要写一行代码，简单的动画仅需要定义一个<code>@keyframes</code>并设置基本的参数就能动了。对比使用<code>Javascript</code>编写的动画，CSS3 动画更简单也更高效，使用<code>sprite</code>还能做出gif图片的效果。也可以搭配<a href="https://developer.mozilla.org/en-US/docs/Web/SVG" target="_blank" rel="external"><code>SVG</code></a>使用。</p>
<a id="more"></a>
<p>动画一般是由多个不同的图片不断快速切换一张图片叫做一帧，在CSS中也一样，只不过不必须使用图片。而是使用<code>@keyframes</code>来定义一帧所要显示的“图片”。</p>
<h3 id="keyframes">@keyframes</h3>
<p>使用<code>@keyframes</code>来定义一组名为<code>slidein</code>的关键帧序列，使DOM从左向右移动300px</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> slidein </span>&#123;</span><br><span class="line">    <span class="tag">from</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">    <span class="tag">to</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*兼容webkit内核浏览器*/</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> slidein </span>&#123;</span><br><span class="line">    <span class="tag">from</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">    <span class="tag">to</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*兼容火狐浏览器*/</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">-moz-keyframes</span> slidein </span>&#123;</span><br><span class="line">    <span class="tag">from</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">    <span class="tag">to</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个button然后，并设置动画参数，然后应用到这个button上</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"slidein"</span>&gt;</span>WATCH ME<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应用动画到button元素上</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.slidein</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">animation-duration</span>:<span class="value"> <span class="number">3s</span></span></span>;   <span class="comment">/*整个动画持续时间*/</span></span><br><span class="line">  <span class="rule"><span class="attribute">-moz-animation-duration</span>:<span class="value"> <span class="number">3s</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-animation-duration</span>:<span class="value"> <span class="number">3s</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">animation-iteration-count</span>:<span class="value"> <span class="number">3</span></span></span>; <span class="comment">/*动画重复次数*/</span></span><br><span class="line">  <span class="rule"><span class="attribute">-moz-animation-iteration-count</span>:<span class="value"> <span class="number">3</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-animation-iteration-count</span>:<span class="value"> <span class="number">3</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">animation-name</span>:<span class="value"> slidein</span></span>;  <span class="comment">/*动画的名称@keyframe定义的slidein*/</span></span><br><span class="line">  <span class="rule"><span class="attribute">-moz-animation-name</span>:<span class="value"> slidein</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-animation-name</span>:<span class="value"> slidein</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<style type="text/css">
@keyframes slidein {
    from {
        left: 0;
    }
    to {
        left: 300px;
    }
}
@-webkit-keyframes slidein {
    from {
        left: 0;
    }
    to {
        left: 300px;
    }
}
/*兼容火狐浏览器*/
@-moz-keyframes slidein {
    from {
        left: 0;
    }
    to {
        left: 300px;
    }
}
.slidein {
  position: absolute;
  animation-duration: 3s;   /*整个动画持续时间*/
  -moz-animation-duration: 3s;
  -webkit-animation-duration: 3s;
  animation-iteration-count: 3; /*动画重复次数*/
  -moz-animation-iteration-count: 3;
  -webkit-animation-iteration-count: 3;
  animation-name: slidein;  /*动画的名称@keyframe定义的slidein*/
  -moz-animation-name: slidein;
  -webkit-animation-name: slidein;
}
.infinite.slidein {
    animation-direction: alternate;
    -moz-animation-direction: alternate;
    -webkit-animation-direction: alternate;
    animation-iteration-count: infinite;
    -moz-animation-iteration-count: infinite;
    -webkit-animation-iteration-count: infinite;
}
</style>
<div style="height: 30px; position: relative;"><button class="slidein">WATCH ME</button></div>
<p>这样就完成了一个简单的动画，可以看到按钮从左边往右边移动，重复3次后停止，可以把动画重复次数设置为<code>infinite</code>这样动画就会一直播放下去。</p>
<p>还可以设置动画的方向<code>animation-direction: alternate;</code>，这样动画还会倒着播放。你可以<a href="http://codepen.io/Lin-H/pen/ojQMrM" target="_blank" rel="external">动手试试</a></p>
<div style="height: 30px; position: relative;"><button class="slidein infinite">WATCH ME</button></div>
<h3 id="参考链接">参考链接</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations" target="_blank" rel="external">Using CSS animations</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="css3-动画">CSS3 动画</h2>
<p>CSS3 动画不需要写一行代码，简单的动画仅需要定义一个<code>@keyframes</code>并设置基本的参数就能动了。对比使用<code>Javascript</code>编写的动画，CSS3 动画更简单也更高效，使用<code>sprite</code>还能做出gif图片的效果。也可以搭配<a href="https://developer.mozilla.org/en-US/docs/Web/SVG"><code>SVG</code></a>使用。</p>]]>
    
    </summary>
    
      <category term="css3" scheme="http://lin-h.com/tags/css3/"/>
    
      <category term="CSS" scheme="http://lin-h.com/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[广州实习]]></title>
    <link href="http://lin-h.com/2015/10/07/guangzhou-intership/"/>
    <id>http://lin-h.com/2015/10/07/guangzhou-intership/</id>
    <published>2015-10-07T10:36:00.000Z</published>
    <updated>2016-01-15T06:40:59.362Z</updated>
    <content type="html"><![CDATA[<p>从9月份开始在广州实习，主要从事<code>Node.js</code>的开发，使用<code>MongoDB</code>数据库，<code>Express</code>框架。在后台主要提供的是<code>RESTful</code>的接口，前端使用<code>Angular</code>框架进行数据整合。以下做一个简单的总结。(部分代码来自于<a href="https://www.npmjs.com" target="_blank" rel="external">npmjs.org</a>)</p>
<a id="more"></a>
<h2 id="urllib"><a href="https://www.npmjs.com/package/urllib" target="_blank" rel="external">urllib</a></h2>
<p><code>urllib</code>是一个用于发送HTTP请求的库，功能强大，使用简单。当时有个项目需要将对方已有的，针对web页面的api接口重新封装成适用于app端的接口。并且还需要添加一些额外数据。当时就用到了这个库。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urllib = <span class="built_in">require</span>(<span class="string">'urllib'</span>);</span><br><span class="line"> </span><br><span class="line">urllib.request(<span class="string">'http://cnodejs.org/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err; <span class="comment">//错误处理</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//res是请求成功后得到的HTTP回复</span></span><br><span class="line">  <span class="built_in">console</span>.log(res.statusCode);</span><br><span class="line">  <span class="built_in">console</span>.log(res.headers);</span><br><span class="line">  <span class="comment">//data就是实际得到的数据内容</span></span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="formstream"><a href="https://www.npmjs.com/package/formstream" target="_blank" rel="external">formstream</a></h2>
<p>使用<code>Node.js</code>提交表单，表单在从前端发送至后端的时候并不是使用明文传输，在同时传输文件和其他value时，使用的是<code>multipart/form-data</code>，会以二进制的形式发送所有数据。<code>Express</code>框架在接收到提交过来的表单的时候可以保留文件的二进制形式，然后使用<code>formstream</code>往这个二进制流中添加额外的数据(formstream中有相应的方法),最后得到的也是一个二进制流，在<code>urllib</code>中设置好头部后，添加表单数据就能发送了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formstream = <span class="built_in">require</span>(<span class="string">'formstream'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> form = formstream();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// form.file('file', filepath, filename); </span></span><br><span class="line"><span class="comment">// 向表单中添加文件</span></span><br><span class="line">form.file(<span class="string">'file'</span>, <span class="string">'./logo.png'</span>, <span class="string">'upload-logo.png'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 添加其他的值form 中的 field</span></span><br><span class="line">form.field(<span class="string">'foo'</span>, <span class="string">'fengmk2'</span>).field(<span class="string">'love'</span>, <span class="string">'aerdeng'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 直接添加而二进制的流</span></span><br><span class="line"><span class="comment">// form.buffer(name, buffer, filename, mimeType) </span></span><br><span class="line">form.buffer(<span class="string">'file2'</span>, <span class="keyword">new</span> Buffer(<span class="string">'This is file2 content.'</span>), <span class="string">'foo.txt'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  host: <span class="string">'upload.cnodejs.net'</span>,</span><br><span class="line">  path: <span class="string">'/store'</span>,</span><br><span class="line">  headers: form.headers()<span class="comment">//设置HTTP请求头</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Status: %s'</span>, res.statusCode);</span><br><span class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="moment"><a href="http://momentjs.com/" target="_blank" rel="external">moment</a></h2>
<p><code>moment</code>是一个十分强大的时间处理库，几乎任何你想要的操作时间的函数都会有。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">moment().format(<span class="string">'LLL'</span>);   <span class="comment">// November 2, 2015 11:17 PM</span></span><br><span class="line">moment().add(<span class="number">7</span>, <span class="string">'days'</span>).subtract(<span class="number">1</span>, <span class="string">'months'</span>).year(<span class="number">2009</span>).hours(<span class="number">0</span>).minutes(<span class="number">0</span>).seconds(<span class="number">0</span>); <span class="comment">//对日期进行加减操作</span></span><br><span class="line">moment([<span class="number">2100</span>]).isLeapYear() <span class="comment">// 是否是闰年</span></span><br></pre></td></tr></table></figure>
<h2 id="async"><a href="https://github.com/caolan/async" target="_blank" rel="external">async</a></h2>
<p>又是一个十分强大的库，<code>async</code>是一个用来进行更好异步编程的库，为什么说是更好，因为Node.js本身的异步方式无论是<code>callback</code>，<code>XHR</code>或者<code>Promise</code>都有自身的缺陷，<code>callback</code>本身不适合有依赖的回调过程，<code>Promise</code>难以控制需要同步的异步方法。但是有了<code>async</code>就可以进行多个异步任务，只要告诉它异步任务执行的条件就行，还能编写同步的异步方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.auto(&#123;</span><br><span class="line">    get_data: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'in get_data'</span>);</span><br><span class="line">        <span class="comment">// 这里是异步运行的代码 </span></span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">'data'</span>, <span class="string">'converted to array'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    make_folder: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'in make_folder'</span>);</span><br><span class="line">        <span class="comment">// 异步代码，创建一个文件夹来存储文件 </span></span><br><span class="line">        <span class="comment">// 这一函数与get_data函数一同运行</span></span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">'folder'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    write_file: [<span class="string">'get_data'</span>, <span class="string">'make_folder'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback, results</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'in write_file'</span>, <span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">        <span class="comment">// 当拿到数据，且创建好文件夹后调用</span></span><br><span class="line">        <span class="comment">// 把数据写入文件中</span></span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">'filename'</span>);</span><br><span class="line">    &#125;],</span><br><span class="line">    email_link: [<span class="string">'write_file'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback, results</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'in email_link'</span>, <span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">        <span class="comment">// 当数据写入完毕后调用</span></span><br><span class="line">        <span class="comment">// results.write_file这个变量中存的就是write_file函数返回的结果</span></span><br><span class="line">        callback(<span class="literal">null</span>, &#123;<span class="string">'file'</span>:results.write_file, <span class="string">'email'</span>:<span class="string">'user@example.com'</span>&#125;);</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//最后这个函数是当所有异步任务都完成时调用的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err = '</span>, err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'results = '</span>, results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按顺序执行的异步任务async.series(array, callback)</span></span><br><span class="line"><span class="comment">//array中是以数组形式存储的一些列函数</span></span><br><span class="line"><span class="keyword">async</span>.series([&#123;</span><br><span class="line">    one: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    two: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// results is now equal to: &#123;one: 1, two: 2&#125; </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在<code>Node.js</code>中异步调用随处可见，使用<code>async</code>能够更好的控制异步任务，尽管一开始使用这个库有点困难，但学会后能够大大提高效率。</p>
<h2 id="mongodb">MongoDB</h2>
<p>非关系型数据库，说直接点就是存储<code>JSON</code>格式数据的数据库，没有表的概念，只有<code>集合Collection</code>，就相当于SQL中的表。数据叫做一个文档</p>
<p>项目中使用的库是<a href="http://mongoosejs.com/" target="_blank" rel="external"><code>Mongoose</code></a>，使用起来还是挺简单的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询name为john，age大于等于18的数据</span></span><br><span class="line">MyModel.find(&#123; name: <span class="string">'john'</span>, age: &#123; $gte: <span class="number">18</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">MyModel.create(&#123; type: <span class="string">'jelly bean'</span> &#125; <span class="function"><span class="keyword">function</span> (<span class="params">err, jellybean, snickers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改age大于18的数据，设置oldEnough字段为true</span></span><br><span class="line">MyModel.update(&#123; age: &#123; $gt: <span class="number">18</span> &#125; &#125;, &#123; oldEnough: <span class="literal">true</span> &#125;, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除title为baby born from alien father的json</span></span><br><span class="line">Comment.remove(&#123; title: <span class="string">'baby born from alien father'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>基本操作都没有什么难度，但在关联表查询的时候就复杂一点，需要手动设置条件，因为非关系型数据库没有表关联。所以许多复杂的操作都是通过MongoDB中的操作符来实现的。</p>
<p>比如像前面看到的<code>$gt</code>就是大于的意思，<code>$gte</code>大于等于，列举一些比较常用的</p>
<ul>
<li>$in {a: {$in: [1, 2, 3]}}满足条件a的值为1或2或3的文档</li>
<li>$or 或条件 {$or: [{a: {$gt: 0}}, {b: $lg: 0}]}满足a大于0或是b小于0</li>
<li>$regex 对某个字段进行正则匹配，通过即为满足条件</li>
<li>$inc 增加某个字段指定数量{a: {$inc: 1}}a字段加1</li>
<li>$currentDate 当前时间，相当于SQL的now()</li>
<li>$pop 删除一个数组字段的元素</li>
<li>$push 插入一个数组类型的字段</li>
<li>$sort 排序，常用的是{$sort: &quot;desc&quot;}降序排列</li>
<li>$limit 只取指定数量的文档</li>
<li>$skip 跳过指定数量的文档</li>
</ul>
<p>还有其他很多操作符<a href="https://docs.mongodb.org/manual/reference/operator/" target="_blank" rel="external">Operators — MongoDB Manual 3.0</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从9月份开始在广州实习，主要从事<code>Node.js</code>的开发，使用<code>MongoDB</code>数据库，<code>Express</code>框架。在后台主要提供的是<code>RESTful</code>的接口，前端使用<code>Angular</code>框架进行数据整合。以下做一个简单的总结。(部分代码来自于<a href="https://www.npmjs.com">npmjs.org</a>)</p>]]>
    
    </summary>
    
      <category term="life" scheme="http://lin-h.com/tags/life/"/>
    
      <category term="node.js" scheme="http://lin-h.com/tags/node-js/"/>
    
      <category term="Others" scheme="http://lin-h.com/categories/Others/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git的各种撤销操作]]></title>
    <link href="http://lin-h.com/2015/06/14/git-undo-operation/"/>
    <id>http://lin-h.com/2015/06/14/git-undo-operation/</id>
    <published>2015-06-14T04:32:48.000Z</published>
    <updated>2016-01-15T06:40:59.361Z</updated>
    <content type="html"><![CDATA[<p>使用版本控制工具<code>Git</code>最大的好处就是，发生错误操作、修改后可以恢复到原来最后一次正确的状态</p>
<h3 id="撤销git-push操作">撤销git push操作</h3>
<p>运行<code>git push</code>后，会将新的<code>commit</code>提交到远程仓库。可以使用<code>git revert</code>来撤销操作</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">revert </span>&lt;SHA&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>git revert</code>会创建一个新的<code>commit</code>，其中的修改与<code>&lt;SHA&gt;</code>的<code>commit</code>相反，以此来达到撤销之前操作的目的。</p>
<h3 id="修改commit信息">修改commit信息</h3>
<p>当使用<code>git commit -m &quot;Fxies bug #42&quot;</code>提交了一个<code>commit</code>后发现信息写错了，可以使用<code>git commit --amend -m &quot;Fixes bug #42&quot;</code>来修改。这条命令会将最近提交的<code>commit</code>信息修改</p>
<h3 id="撤销当前编辑的内容">撤销当前编辑的内容</h3>
<p>当编辑了代码并保存后，发现写错了，但是没有<code>commit</code>，想要把文件恢复成原来的样子，使用</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- &lt;bad filename&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;bad filename&gt;</code>可以是分支名或指定的<code>SHA</code>，默认下会回到最近的一次<code>commit</code></p>
<h3 id="撤销commit">撤销commit</h3>
<p>在提交了几次<code>commit</code>后，觉得都不好，想要把这几次<code>commit</code>全都撤销掉</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &#60;last good SHA&#62; &#10;git reset --hard &#60;last good SHA&#62;</span><br></pre></td></tr></table></figure>
<p><code>&lt;last good SHA&gt;</code>指想要恢复到的<code>commit</code>。<code>git reset</code>将<code>commit</code>撤消后代码的变动还在，但没有被<code>commit</code>；加上<code>--hard</code>会将代码的变动一并撤销</p>
<h3 id="恢复撤销的commit">恢复撤销的commit</h3>
<p>在使用<code>git reset --hard</code>撤销了<code>commit</code>后，又想要恢复，可以使用<code>git reflog</code> 和 <code>git reset</code>或<code>git checkout</code></p>
<ul>
<li><code>git reflog</code>只能当<code>HEAD</code>发生改变后使用，运行<code>git reflog</code>后可以看到能够恢复的<code>commit</code></li>
<li>如果是想要恢复<code>git</code>工程的历史，使用<code>git reset --hard &lt;SHA&gt;</code></li>
<li>如果是想要重新创建删除的文件，并且不修改历史记录，使用<code>git checkout &lt;SHA&gt; -- &lt;filename&gt;</code></li>
<li>如果是想重做某个<code>commit</code>使用<code>git cherry-pick &lt;SHA&gt;</code></li>
</ul>
<h3 id="撤销提交到master分支的修改">撤销提交到master分支的修改</h3>
<p>在提交了几个<code>commit</code>后发现是<code>master</code>分支，想要把这些<code>commit</code>提交到其他分支上去，可以使用<code>git branch feature</code>, <code>git reset --hard origin/master</code>, 和 <code>git checkout feature</code><br>
<code>git branch feature</code>创建一个新的分支叫<code>feature</code>，<code>git reset --hard origin/master</code>撤销对<code>master</code>分支的修改，<code>git checkout feature</code>将当前分支切换到<code>feature</code></p>
<h3 id="撤销已记录的文件">撤销已记录的文件</h3>
<p>不小心将<code>application.log</code>添加到了仓库中(tracked file)，撤销这个操作可以使用<code>git rm --cached application.log</code></p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://github.com/blog/2019-how-to-undo-almost-anything-with-git" target="_blank" rel="external">How to undo (almost) anything with Git</a></li>
<li><a href="http://git-scm.com/docs" target="_blank" rel="external">Git - Reference</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用版本控制工具<code>Git</code>最大的好处就是，发生错误操作、修改后可以恢复到原来最后一次正确的状态</p>
<h3 id="撤销git-push操作">撤销git push操作</h3>
<p>运行<code>git push</code>后，会将新的<code>commit</code>提交到远程仓库。可以使用<code>git revert</code>来撤销操作</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">revert </span>&lt;SHA&gt;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="git" scheme="http://lin-h.com/tags/git/"/>
    
      <category term="git" scheme="http://lin-h.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rust快速入门]]></title>
    <link href="http://lin-h.com/2015/05/28/rust-quick-guide/"/>
    <id>http://lin-h.com/2015/05/28/rust-quick-guide/</id>
    <published>2015-05-28T10:05:44.000Z</published>
    <updated>2016-01-15T06:40:59.367Z</updated>
    <content type="html"><![CDATA[<h2 id="rust简介">Rust简介</h2>
<p><code>Rust</code>是一种编译语言，与<code>C</code>和<code>Go</code>一样编译后生成的是二进制文件。<code>Rust</code>专注于<code>安全</code>，<code>速度</code>，<code>并发</code>。并且不需要垃圾回收器，这也让<code>Rust</code>在某些情况下比其他语言更好用。比如与其他语言混合编写嵌入其中、编写底层软件，驱动或操作系统。<code>Rust</code>在编译期间会将语法错误和不安全因素最大程度地找出来，从而避免在程序运行时出现问题。<code>Rust</code>语言可以胜任三个软件层次的开发。并且在今年5月15号发布了第一个1.0.0正式版本。</p>
<a id="more"></a>
<ul>
<li>
<p>(底层)系统底层开发：裸金属(bare metal)、操作系统(OS)、内核(kernel)、内核模块(mod)等 ( <a href="https://github.com/charliesome/rustboot" target="_blank" rel="external">rustboot</a>, <a href="https://github.com/ryanra/RustOS" target="_blank" rel="external">rustos</a>, <a href="https://github.com/thepowersgang/rust-barebones-kernel" target="_blank" rel="external">barebones</a>)</p>
</li>
<li>
<p>(中层)系统应用开发：虚拟机(VM)、容器(Container)、数据库/游戏/Web/Ftp/Dns服务器、浏览器引擎、模拟器等 (<a href="https://github.com/servo/servo" target="_blank" rel="external">Servo浏览器引擎</a>, <a href="https://github.com/PistonDevelopers/piston" target="_blank" rel="external">Piston游戏引擎</a>, <a href="https://github.com/hyperium/hyper" target="_blank" rel="external">Hyper</a> HTTP服务器, <a href="https://github.com/pcwalton/sprocketnes" target="_blank" rel="external">SprocketNES</a> NES模拟器, <a href="https://github.com/nukep/llamadb" target="_blank" rel="external">LlamaDB</a>数据库)</p>
</li>
<li>
<p>(上层)普通应用开发：编译器、浏览器、消息推送系统、Web应用系统、管理信息系统、其他等等 (<a href="https://github.com/rust-lang/rust/tree/master/src/librustc" target="_blank" rel="external">Rustc编译器</a>, <a href="https://github.com/rust-lang/cargo" target="_blank" rel="external">Cargo项目管理</a>, <a href="https://github.com/iron/iron" target="_blank" rel="external">Iron</a> &amp; <a href="https://github.com/nickel-org/nickel.rs" target="_blank" rel="external">Nickel</a> Web开发框架, <a href="https://github.com/PistonDevelopers/conrod" target="_blank" rel="external">Conrod</a> GUI库)</p>
</li>
</ul>
<h1>目录</h1>
<ul>
<li><a href="#variable-bindings-%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A">Variable Bindings</a></li>
<li><a href="#const-and-static">Const and Static</a></li>
<li><a href="#functions-%E5%87%BD%E6%95%B0">Functions</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-primitive-types">Primitive-types</a></li>
<li><a href="#comments-%E6%B3%A8%E9%87%8A">Comments</a></li>
<li><a href="#control-flow-statement-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5">Control flow statement</a></li>
<li><a href="#ownership">Ownership</a></li>
<li><a href="#borrowing">Borrowing</a></li>
<li><a href="#lifetimes">Lifetimes</a></li>
<li><a href="#structs">Structs</a></li>
<li><a href="#enums">Enums</a></li>
<li><a href="#match">Match</a></li>
<li><a href="#patterns">Patterns</a></li>
<li><a href="#method-syntax">Method Syntax</a></li>
<li><a href="#vectors-%E5%90%91%E9%87%8F">Vectors</a></li>
<li><a href="#strings">Strings</a></li>
<li><a href="#generics-%E6%B3%9B%E5%9E%8B">Generics</a></li>
<li><a href="#traits">Traits</a></li>
<li><a href="#drop">Drop</a></li>
<li><a href="#trait-objects">Trait Objects</a></li>
<li><a href="#closures-%E9%97%AD%E5%8C%85">Closures</a></li>
<li><a href="#universal-function-call-syntax">Universal Function Call Syntax</a></li>
<li><a href="#attributes">Attributes</a></li>
<li><a href="#type-aliases-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D">type Aliases</a></li>
<li><a href="#casting-between-types-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">Casting Between Types</a></li>
<li><a href="#operators-and-overloading-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD">Operators and Overloading</a></li>
</ul>
<h2 id="variable-bindings-变量绑定">Variable Bindings(变量绑定)</h2>
<p>定义变量绑定使用<code>let</code>语句。</p>
<blockquote>
<p><strong>注意</strong>：在<code>Rust</code>中处于安全考虑，定义的变量默认都是不可修改的，如果需要定义可修改的变量需要在变量前加上<code>mut</code>关键字。</p>
</blockquote>
<p><code>Rust</code>是静态类型语言(statically typed language)，在定义变量时若不指定变量类型，<code>Rust</code>会自动进行类型推导(type inference)。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;    <span class="comment">//类型推导，定义的x类型为i32值为5</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x: <span class="keyword">i32</span> = <span class="number">10</span>;    <span class="comment">//定义一个类型为i32，值为10，可修改的变量绑定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="const-and-static">const and static</h2>
<p>定义常量</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> N: <span class="keyword">i32</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>定义全局(静态)变量绑定</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> N: <span class="keyword">i32</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> N: <span class="keyword">i32</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//因为是全局变量，修改时需要在unsafe内</span></span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    N += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"N: &#123;&#125;"</span>, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="functions-函数">Functions(函数)</h2>
<p><code>Rust</code>使用<code>fn</code>关键字来声明函数。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个无参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello Rust"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个有2个参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">print_sum</span></span>(x: <span class="keyword">i32</span>, y: <span class="keyword">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"sum is: &#123;&#125;"</span>, x + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：函数的参数必须指定类型。</p>
</blockquote>
<p>函数返回值，在函数声明中使用<code>-&gt;</code>指定返回的值的类型。函数的最后一行指定了要返回的值，而且这一行不能以分号<code>;</code>结尾，否则报错。当然你也可以使用<code>return</code>关键字来返回一个值。但如果需要返回的值在函数最后一行，通常不使用<code>return</code>。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个32位整数类型</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add_one</span></span>(x: <span class="keyword">i32</span>) -&gt; <span class="keyword">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span>  <span class="comment">//return x + 1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Rust</code>是基于表达式的语言，在<code>Rust</code>中只有两种语句(statements)，声明语句(declaration statements) 和 表达式语句(expression statements)，表达式语句的作用就是使表达式不返回值。其他的全都是表达式。主要区别为表达式返回值，语句不返回值。赋值表达式的返回值是空的元组<code>()</code>。</p>
<p>若函数的返回值是<code>!</code>，称为<code>发散函数(Diverging functions)</code>，代表该函数不会返回。如</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">diverges</span></span>() -&gt; ! &#123;</span><br><span class="line">    <span class="built_in">panic!</span>(<span class="string">"This function never returns!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>panic!()</code>宏(以!结尾的都是宏，类似的还有<code>println!()</code>)的作用是使当前线程崩溃退出，并输出信息。因为运行该函数的线程崩溃退出了，所以该函数不会返回。(我暂时不知道这类发散函数有什么用-_-)</p>
<h2 id="基本类型-primitive-types">基本类型(Primitive Types)</h2>
<ul>
<li>Booleans</li>
<li>char Unicode 4字节</li>
<li>Numeric i8 i16 i32 i64 u8 u16 u32 u64 isize usize f32 f64</li>
<li>Arrays 数组的类型为<code>[T; N]</code>。<code>T</code>为类型，<code>N</code>为数组长度</li>
<li>Slices <code>Slices</code>是对另一个数据结构的引用，目的是安全高效地对变量中的部分数据进行引用，类型为<code>&amp;[T]</code></li>
<li>str 字符串，经常以引用方式<code>&amp;str</code>来使用</li>
<li>Tuples 元组与数组相似，但元素可以是不同的类型</li>
<li>Functions 函数指针类型</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Booleans</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">let</span> y: <span class="keyword">bool</span> = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// char</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">'x'</span>;</span><br><span class="line"><span class="keyword">let</span> two_hearts = '💕';</span><br><span class="line"></span><br><span class="line"><span class="comment">// Numeric</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">42</span>; <span class="comment">// x 类型为 i32</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">1.0</span>; <span class="comment">// y 类型为 f64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrays</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// m: [i32; 3]</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>; <span class="number">20</span>]; <span class="comment">// a: [i32; 20]  初始化数组的值为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Slices</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> middle = &amp;a[<span class="number">1</span>..<span class="number">4</span>]; <span class="comment">// middle中只包含a数组中的[1,2,3]</span></span><br><span class="line"><span class="keyword">let</span> complete = &amp;a[..]; <span class="comment">// complete中包含a数组中的所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tuples</span></span><br><span class="line"><span class="keyword">let</span> x = (<span class="number">1</span>, <span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">let</span> x: (<span class="keyword">i32</span>, &amp;<span class="keyword">str</span>) = (<span class="number">1</span>, <span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">let</span> y = x.<span class="number">0</span>;<span class="comment">// 访问元组x的第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Functions</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(x: <span class="keyword">i32</span>) -&gt; <span class="keyword">i32</span> &#123; x &#125;</span><br><span class="line"><span class="keyword">let</span> x: <span class="function"><span class="keyword">fn</span></span>(<span class="keyword">i32</span>) -&gt; <span class="keyword">i32</span> = foo;</span><br><span class="line"><span class="comment">// x 为foo函数的指针，函数参数为i32类型，返回类型为i32</span></span><br></pre></td></tr></table></figure>
<h2 id="comments-注释">Comments(注释)</h2>
<p><code>Rust</code>有两种注释，行注释(line comments)和文档注释(doc comments)。行注释跟C语言一样使用<code>//</code>，把当前行注释掉。文档注释使用<code>///</code>，而且支持<code>Markdown</code>语法。你可以使用<code>rustdoc</code>将文档注释生成为HTML文档。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///Adds one to the number given.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///# Examples</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///```</span></span><br><span class="line"><span class="comment">///let five = 5;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///assert_eq!(6, add_one(5));</span></span><br><span class="line"><span class="comment">///```</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add_one</span></span>(x: <span class="keyword">i32</span>) -&gt; <span class="keyword">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="control-flow-statement-控制语句">Control flow statement(控制语句)</h2>
<h3 id="if">if</h3>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x is five!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> x == <span class="number">6</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x is six!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x is not five or six :("</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for">for</h3>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x); <span class="comment">// x: i32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以抽象为</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> expression &#123;</span><br><span class="line">    code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟<code>Python</code>的for语句有点像，<code>expression</code>是一个迭代器(iterator)即一个可以进行遍历的对象，比如数组。</p>
<h3 id="while">while</h3>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> x &gt; <span class="number">1</span> &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">    <span class="keyword">if</span> done == <span class="keyword">true</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">    <span class="comment">//等价于 while true需要break跳出循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ownership">Ownership</h2>
<p><code>Ownership</code>类似于作用域，在<code>Rust</code>程序中变量一旦离开作用域就会被释放。在变量绑定中，没有实现<code>Copy</code>特性的类型(如Vec<i32>)在进行赋值时，传递的是内存地址，而<code>Rust</code>出于安全考虑当两个变量绑定到同一值上时，<code>Rust</code><br>会将原来的绑定删除，在函数传参时同样如此。而实现了<code>Copy</code>的类型(如基本类型i32)在进行赋值时传递的就是值。</i32></p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> v2 = v;</span><br><span class="line"><span class="built_in">println!</span>(v)<span class="comment">//在这里就会报错，因为v的值([1, 2, 3]的地址)已经传给v2了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> v2 = v;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"v is: &#123;&#125;"</span>, v);<span class="comment">//在这里就不会报错，因为v是i32类型，传递的是值。</span></span><br></pre></td></tr></table></figure>
<h2 id="borrowing">Borrowing</h2>
<p>如果一个变量作为参数传入了函数中，那么该变量的作用域就变了，变为在函数内，所以在函数外该变量就不能使用了。在<code>Rust</code>中有<code>Borrowing</code>的概念，通过给函数传入变量的引用来达到&quot;借用&quot;的目的，使得变量在函数外还能继续使用(Borrow Ownership)。引用与变量绑定一样，默认是<code>不可修改</code>的。引用类似C语言的指针，因为在使用时得加上<code>*</code>符号。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类型前加上&amp;符号表示该类型的引用</span></span><br><span class="line"><span class="comment">//在变量前加上&amp;符号辨识变量的引用</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(v1: &amp;<span class="built_in">Vec</span>&lt;<span class="keyword">i32</span>&gt;, v2: &amp;<span class="built_in">Vec</span>&lt;<span class="keyword">i32</span>&gt;) -&gt; <span class="keyword">i32</span> &#123;</span><br><span class="line">    <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v1 = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> v2 = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> answer = foo(&amp;v1, &amp;v2);</span><br><span class="line"><span class="comment">// v1 和 v2 还能继续使用</span></span><br></pre></td></tr></table></figure>
<p>若要创建可修改的引用，需要使用<code>&amp;mut</code>，而且被引用的变量也必须是可修改的。修改变量的引用，变量也会被修改。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">5</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> y = &amp;<span class="keyword">mut</span> x;</span><br><span class="line">    *y += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line"><span class="comment">//输出6</span></span><br></pre></td></tr></table></figure>
<p>一个变量可以有多个引用(不可修改的引用)，但同一时间(前一个可修改引用未被释放)只能有一个可修改引用。而且当作用域(scope)中存在变量的可修改引用(&amp;mut T)时，无法创建该变量的引用。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">&#123;                   </span><br><span class="line">    <span class="keyword">let</span> y = &amp;<span class="keyword">mut</span> x; <span class="comment">// -+ &amp;mut borrow starts here</span></span><br><span class="line">    *y += <span class="number">1</span>;        <span class="comment">//  |</span></span><br><span class="line">&#125;                   <span class="comment">// -+ ... and ends here</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);  <span class="comment">// &lt;- try to borrow x here</span></span><br></pre></td></tr></table></figure>
<p>上面这个例子中x的可修改引用y在大括号中创建，并在大括号外释放，也就是限定了y变量的作用域。如果去掉那两个大括号最后的<code>println!(&quot;{}&quot;, x)</code>会报错。</p>
<p><code>Rust</code>这么做主要是为了避免<code>数据竞争(data race)</code>当两个指针指向同一个内存地址时，会出现至少一个访问会等待，导致操作无法同步。</p>
<p>变量的定义必须在引用之前。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y: &amp;<span class="keyword">i32</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">y = &amp;x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, y);<span class="comment">//此处会发生错误，因为x的定义是在y被定义之后。</span></span><br><span class="line"><span class="comment">//正确的写法是</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y: &amp;<span class="keyword">i32</span>;</span><br><span class="line">y = &amp;x;</span><br></pre></td></tr></table></figure>
<h2 id="lifetimes">Lifetimes</h2>
<p>寿命(Lifetimes)指变量绑定在作用域内的范围。例如下面的例子中，变量的寿命可以显示或隐式定义。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式定义</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(x: &amp;<span class="keyword">i32</span>, y: &amp;<span class="keyword">mut</span> <span class="keyword">i32</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示定义</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>&lt;<span class="string">'a</span>, <span class="string">'b</span>&gt;(x: &amp;<span class="string">'a</span> <span class="keyword">i32</span>, y: &amp;<span class="string">'b</span> <span class="keyword">mut</span> <span class="keyword">i32</span>) &#123;<span class="comment">//定义可修改引用的寿命&amp;'b mut i32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义变量的寿命主要是为了防止某个被引用的资源释放后，引用出错。(类似C中的野指针)</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Foo&lt;<span class="string">'a</span>&gt; &#123;</span><br><span class="line">    x: &amp;<span class="string">'a</span> <span class="keyword">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x;                    <span class="comment">// -+ x goes into scope</span></span><br><span class="line">                              <span class="comment">//  |</span></span><br><span class="line">    &#123;                         <span class="comment">//  |</span></span><br><span class="line">        <span class="keyword">let</span> y = &amp;<span class="number">5</span>;           <span class="comment">// ---+ y goes into scope</span></span><br><span class="line">        <span class="keyword">let</span> f = Foo &#123; x: y &#125;; <span class="comment">// ---+ f goes into scope</span></span><br><span class="line">        x = &amp;f.x;             <span class="comment">//  | | error here</span></span><br><span class="line">    &#125;                         <span class="comment">// ---+ f and y go out of scope</span></span><br><span class="line">                              <span class="comment">//  |</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);        <span class="comment">//  |</span></span><br><span class="line">&#125;                             <span class="comment">// -+ x goes out of scope</span></span><br></pre></td></tr></table></figure>
<p>在上面的例子中<code>struct Foo</code>中的<code>x</code>的寿命就是<code>y</code>，因为<code>x</code>被赋值为<code>y</code>。而<code>y</code>的作用域仅在两个大括号内，所以当<code>y</code>被释放后，<code>f</code>也会被释放。</p>
<p>有一个特殊的变量寿命<code>'static</code>。也就是静态域，类似C++类中的静态变量。寿命为<code>'static</code>的变量绑定会在整个程序中都存在。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> FOO: <span class="keyword">i32</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> x: &amp;<span class="string">'static</span> <span class="keyword">i32</span> = &amp;FOO;</span><br></pre></td></tr></table></figure>
<p>函数参数的寿命</p>
<ul>
<li>函数的每个参数若省略定义寿命名则每个参数都有一个独立的寿命名。(只有引用类型的参数才需要寿命名)</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">args</span></span>&lt;T:ToCStr&gt;(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, args: &amp;[T]) -&gt; &amp;<span class="keyword">mut</span> Command <span class="comment">// 省略</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">args</span></span>&lt;<span class="string">'a</span>, <span class="string">'b</span>, T:ToCStr&gt;(&amp;<span class="string">'a</span> <span class="keyword">mut</span> <span class="keyword">self</span>, args: &amp;<span class="string">'b</span> [T]) -&gt; &amp;<span class="string">'a</span> <span class="keyword">mut</span> Command <span class="comment">// 显示定义</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果只有一个输入寿命(无论是否省略)，该寿命应用于函数的所有返回值。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(buf: &amp;<span class="keyword">mut</span> [<span class="keyword">u8</span>]) -&gt; BufWriter; </span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>&lt;<span class="string">'a</span>&gt;(buf: &amp;<span class="string">'a</span> <span class="keyword">mut</span> [<span class="keyword">u8</span>]) -&gt; BufWriter&lt;<span class="string">'a</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果有多个输入寿命，其中一个为<code>&amp;self</code> 或 <code>&amp;mut self</code>，<code>self</code>的寿命将应用于所有省略了寿命的返回值。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_mut</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; &amp;<span class="keyword">mut</span> T; </span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_mut</span></span>&lt;<span class="string">'a</span>&gt;(&amp;<span class="string">'a</span> <span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; &amp;<span class="string">'a</span> <span class="keyword">mut</span> T;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上这3个<code>Rust</code>中的概念确实比较难懂，我是根据自己的理解写的，若有不同观点请看官方原文。</p>
</blockquote>
<h2 id="structs">Structs</h2>
<p>与C语言的结构体类似，将某些数据类型组合在一起，形成新的数据结构。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point &#123;  <span class="comment">//名称第一个字母大写，采用驼峰命名法</span></span><br><span class="line">    x: <span class="keyword">i32</span>,     <span class="comment">//不能写成mut x: i32,</span></span><br><span class="line">    y: <span class="keyword">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> origin = Point &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;; <span class="comment">//定义一个Point类型的变量绑定，并赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The origin is at (&#123;&#125;, &#123;&#125;)"</span>, origin.x, origin.y);<span class="comment">//struct变量访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> point = Point3d &#123; x: <span class="number">0</span>, y: <span class="number">0</span>, z: <span class="number">0</span> &#125;;</span><br><span class="line">point = Point3d &#123; y: <span class="number">1</span>, .. point &#125;;</span><br><span class="line"><span class="comment">//新的ponit y为1，x和z使用原来的point的值</span></span><br></pre></td></tr></table></figure>
<h3 id="tuple-structs">Tuple structs</h3>
<p>定义一个类似于<code>tuple</code>的结构。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Color(<span class="keyword">i32</span>, <span class="keyword">i32</span>, <span class="keyword">i32</span>);</span><br><span class="line"><span class="keyword">struct</span> Point(<span class="keyword">i32</span>, <span class="keyword">i32</span>, <span class="keyword">i32</span>);</span><br><span class="line"><span class="comment">//以下两个变量不相等</span></span><br><span class="line"><span class="keyword">let</span> black = Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> origin = Point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h3 id="unit-like-structs">Unit-like structs</h3>
<p>可以定义一个无成员的结构</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Electron;</span><br></pre></td></tr></table></figure>
<h2 id="enums">Enums</h2>
<p><code>Rust</code>的枚举类型，类型为<code>Message</code>的变量绑定可以是<code>Message</code>的其中之一</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title">Message</span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    ChangeColor(<span class="keyword">i32</span>, <span class="keyword">i32</span>, <span class="keyword">i32</span>),</span><br><span class="line">    Move &#123; x: <span class="keyword">i32</span>, y: <span class="keyword">i32</span> &#125;,</span><br><span class="line">    Write(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x: Message = Message::Move &#123; x: <span class="number">3</span>, y: <span class="number">4</span> &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="match">Match</h2>
<p><code>match表达式</code>类似于C语言中的<code>switch</code></p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">"one"</span>),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">"two"</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">"three"</span>),</span><br><span class="line">    <span class="number">4</span> =&gt; <span class="built_in">println!</span>(<span class="string">"four"</span>),</span><br><span class="line">    <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">"five"</span>),</span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">"something else"</span>),<span class="comment">//当所有值都不匹配时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x可以为`enum`类型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title">Message</span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    ChangeColor(<span class="keyword">i32</span>, <span class="keyword">i32</span>, <span class="keyword">i32</span>),</span><br><span class="line">    Move &#123; x: <span class="keyword">i32</span>, y: <span class="keyword">i32</span> &#125;,</span><br><span class="line">    Write(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">quit</span></span>() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change_color</span></span>(r: <span class="keyword">i32</span>, g: <span class="keyword">i32</span>, b: <span class="keyword">i32</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">move_cursor</span></span>(x: <span class="keyword">i32</span>, y: <span class="keyword">i32</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">process_message</span></span>(msg: Message) &#123;</span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">        Message::Quit =&gt; quit(),</span><br><span class="line">        Message::ChangeColor(r, g, b) =&gt; change_color(r, g, b),</span><br><span class="line">        Message::Move &#123; x: x, y: y &#125; =&gt; move_cursor(x, y),</span><br><span class="line">        Message::Write(s) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="patterns">Patterns</h2>
<p>模式，<code>match</code>中x所匹配的就是模式</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span> | <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">"one"</span>), <span class="comment">//匹配1或2</span></span><br><span class="line">    <span class="number">3</span> ... <span class="number">7</span> =&gt; <span class="built_in">println!</span>(<span class="string">"two"</span>),<span class="comment">//匹配3, 4, 5, 6, 7</span></span><br><span class="line">    <span class="string">'a'</span> ... <span class="string">'j'</span> =&gt; <span class="built_in">println!</span>(<span class="string">"three"</span>),<span class="comment">//匹配字母a到j</span></span><br><span class="line">    e @ <span class="number">8</span> ... <span class="number">10</span> =&gt; <span class="built_in">println!</span>(<span class="string">"got a range element &#123;&#125;"</span>, e),<span class="comment">//若x为10，e所绑定的值就为10</span></span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">"anything"</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匹配数据结构的一部分</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">Option</span>&lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Steve"</span>.to_string();</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> x: <span class="built_in">Option</span>&lt;Person&gt; = <span class="built_in">Some</span>(Person &#123; name: <span class="built_in">Some</span>(name) &#125;);</span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="built_in">Some</span>(Person &#123; name: <span class="keyword">ref</span> a @ <span class="built_in">Some</span>(_), .. &#125;) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a),</span><br><span class="line">    _ =&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匹配有变量的枚举类型，使用<code>..</code>来忽略掉参数</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title">OptionalInt</span> &#123;</span><br><span class="line">    Value(<span class="keyword">i32</span>),</span><br><span class="line">    Missing,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = OptionalInt::Value(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    OptionalInt::Value(i) <span class="keyword">if</span> i &gt; <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">"Got an int bigger than five!"</span>),<span class="comment">//添加if作为判断</span></span><br><span class="line">    OptionalInt::Value(..) =&gt; <span class="built_in">println!</span>(<span class="string">"Got an int!"</span>),</span><br><span class="line">    OptionalInt::Missing =&gt; <span class="built_in">println!</span>(<span class="string">"No such luck."</span>),</span><br><span class="line">    <span class="keyword">ref</span> y =&gt; <span class="built_in">println!</span>(<span class="string">"Got a reference to &#123;&#125;"</span>, y),<span class="comment">//获取引用</span></span><br><span class="line">    <span class="keyword">ref</span> <span class="keyword">mut</span> mr =&gt; <span class="built_in">println!</span>(<span class="string">"Got a mutable reference to &#123;&#125;"</span>, mr),</span><br><span class="line">&#125;<span class="comment">//最后输出Got an int!</span></span><br></pre></td></tr></table></figure>
<p>匹配<code>struct</code>类型</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point &#123;</span><br><span class="line">    x: <span class="keyword">i32</span>,</span><br><span class="line">    y: <span class="keyword">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> origin = Point &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> origin &#123;</span><br><span class="line">    Point &#123; x: x, y: y &#125; =&gt; <span class="built_in">println!</span>(<span class="string">"(&#123;&#125;,&#123;&#125;)"</span>, x, y),</span><br><span class="line">    Point &#123; x: x, .. &#125; =&gt; <span class="built_in">println!</span>(<span class="string">"x is &#123;&#125;"</span>, x),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上列出的匹配可以任意组合在一起。</p>
<h2 id="method-syntax">Method Syntax</h2>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Circle &#123;</span><br><span class="line">    x: <span class="keyword">f64</span>,</span><br><span class="line">    y: <span class="keyword">f64</span>,</span><br><span class="line">    radius: <span class="keyword">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Circle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">        std::f64::consts::PI * (<span class="keyword">self</span>.radius * <span class="keyword">self</span>.radius)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = Circle &#123; x: <span class="number">0.0</span>, y: <span class="number">0.0</span>, radius: <span class="number">2.0</span> &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c.area());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先定义一个<code>struct</code> 叫<code>Circle</code>，再用<code>impl</code>往<code>Circle</code>中添加一个方法<code>area</code>，每个方法都会有一个特殊的参数，可以是<code>self</code>，<code>&amp;self</code>，<code>&amp;mut self</code>其中之一。 传值方式与<code>Functions</code>一节相同。在上面的代码中<code>self</code>指代的就是<code>c</code>这个变量(类似于其他语言中的this)，所以在这里我们使用的是引用，而且一般情况下也都是使用引用。</p>
<h3 id="chaining-method-calls-链式调用">Chaining method calls(链式调用)</h3>
<p>通过返回<code>self</code>来达到链式调用的目的</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Circle &#123;</span><br><span class="line">    x: <span class="keyword">f64</span>,</span><br><span class="line">    y: <span class="keyword">f64</span>,</span><br><span class="line">    radius: <span class="keyword">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Circle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">        std::f64::consts::PI * (<span class="keyword">self</span>.radius * <span class="keyword">self</span>.radius)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">grow</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, increment: <span class="keyword">f64</span>) -&gt; &amp;Circle &#123;</span><br><span class="line">        <span class="keyword">self</span>.radius += increment;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> c = Circle &#123; x: <span class="number">0.0</span>, y: <span class="number">0.0</span>, radius: <span class="number">2.0</span> &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c.area());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> d = c.grow(<span class="number">2.0</span>).area();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官方的代码是返回一个新的<code>Circle</code>。此处我做了下修改以更符合返回<code>self</code>的一般情况。</p>
<h3 id="associated-functions">Associated functions</h3>
<p>联合函数不需要<code>self</code>参数</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Circle &#123;</span><br><span class="line">    x: <span class="keyword">f64</span>,</span><br><span class="line">    y: <span class="keyword">f64</span>,</span><br><span class="line">    radius: <span class="keyword">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Circle &#123;</span><br><span class="line">    <span class="comment">//new方法返回一个Circle</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(x: <span class="keyword">f64</span>, y: <span class="keyword">f64</span>, radius: <span class="keyword">f64</span>) -&gt; Circle &#123;</span><br><span class="line">        Circle &#123;</span><br><span class="line">            x: x,</span><br><span class="line">            y: y,</span><br><span class="line">            radius: radius,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = Circle::new(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>);<span class="comment">//联合函数的调用方法Struct::function()</span></span><br><span class="line">    <span class="comment">//类似于其他语言中的静态方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="builder-pattern">Builder Pattern</h3>
<p>为了使用户只能修改<code>struct</code>中特定的属性，需要使用另一个<code>struct</code>来作限制，如<code>Circle</code>的<code>CircleBuilder</code>。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Circle &#123;</span><br><span class="line">    x: <span class="keyword">f64</span>,</span><br><span class="line">    y: <span class="keyword">f64</span>,</span><br><span class="line">    radius: <span class="keyword">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Circle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">        std::f64::consts::PI * (<span class="keyword">self</span>.radius * <span class="keyword">self</span>.radius)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> CircleBuilder &#123;</span><br><span class="line">    x: <span class="keyword">f64</span>,</span><br><span class="line">    y: <span class="keyword">f64</span>,</span><br><span class="line">    radius: <span class="keyword">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> CircleBuilder &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>() -&gt; CircleBuilder &#123;</span><br><span class="line">        CircleBuilder &#123; x: <span class="number">0.0</span>, y: <span class="number">0.0</span>, radius: <span class="number">1.0</span>, &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">x</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, coordinate: <span class="keyword">f64</span>) -&gt; &amp;<span class="keyword">mut</span> CircleBuilder &#123;</span><br><span class="line">        <span class="keyword">self</span>.x = coordinate;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">y</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, coordinate: <span class="keyword">f64</span>) -&gt; &amp;<span class="keyword">mut</span> CircleBuilder &#123;</span><br><span class="line">        <span class="keyword">self</span>.y = coordinate;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">radius</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, radius: <span class="keyword">f64</span>) -&gt; &amp;<span class="keyword">mut</span> CircleBuilder &#123;</span><br><span class="line">        <span class="keyword">self</span>.radius = radius;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">finalize</span></span>(&amp;<span class="keyword">self</span>) -&gt; Circle &#123;</span><br><span class="line">        Circle &#123; x: <span class="keyword">self</span>.x, y: <span class="keyword">self</span>.y, radius: <span class="keyword">self</span>.radius &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = CircleBuilder::new()</span><br><span class="line">                .x(<span class="number">1.0</span>)</span><br><span class="line">                .y(<span class="number">2.0</span>)</span><br><span class="line">                .radius(<span class="number">2.0</span>)</span><br><span class="line">                .finalize();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"area: &#123;&#125;"</span>, c.area());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x: &#123;&#125;"</span>, c.x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"y: &#123;&#125;"</span>, c.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过使用<code>CircleBuilder</code>来创建<code>Circle</code>，就可以对<code>Circle</code>的创建和修改做出约束。</p>
<h2 id="vectors-向量">Vectors (向量)</h2>
<p>向量(<code>Vec&lt;T&gt;</code>)是动态可增长的数组，存储在堆上。使用<code>vec!</code>宏创建。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; <span class="comment">// v: Vec&lt;i32&gt;</span></span><br><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">0</span>; <span class="number">10</span>]; <span class="comment">// 10 个 0</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The third element of v is &#123;&#125;"</span>, v[<span class="number">2</span>]);<span class="comment">//下标从0开始</span></span><br><span class="line"><span class="comment">//遍历向量</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &amp;v &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"A reference to &#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"A mutable reference to &#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Take ownership of the vector and its element &#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="strings">Strings</h2>
<p><code>Rust</code>有两种字符串类型<code>&amp;str</code>(<code>&amp;'static str</code>)和<code>String</code>，都是UTF-8编码(一个字符占4字节)</p>
<p><code>&amp;str</code>类型的字符串如</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">"Hello there."</span>; <span class="comment">// string: &amp;'static str</span></span><br></pre></td></tr></table></figure>
<p>存在于静态域，整个程序都可以访问，固定长度，无法被修改。</p>
<p><code>String</code>是在堆上创建的字符串，可加长，通常使用<code>to_string</code>从<code>&amp;str</code>格式化得到。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="string">"Hello"</span>.to_string(); <span class="comment">// mut s: String 使用了to_string()方法才可以修改s</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line"></span><br><span class="line">s.push_str(<span class="string">", world."</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br></pre></td></tr></table></figure>
<p>可以使用<code>&amp;</code>将<code>String</code>强制格式化为<code>&amp;str</code></p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_slice</span></span>(slice: &amp;<span class="keyword">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Got: &#123;&#125;"</span>, slice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Hello"</span>.to_string();</span><br><span class="line">    takes_slice(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>:  <code>String</code>可以轻易地变成<code>&amp;str</code>，但<code>&amp;str</code>格式化为<code>String</code>需要分配内存(因为是在堆上创建)，所以必要情况下才这么做。</p>
</blockquote>
<h3 id="indexing">Indexing</h3>
<p>无法通过<code>s[0]</code>来访问某个字符，因为字符是UTF-8编码，但可以这样做</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hachiko = <span class="string">"忠犬ハチ公"</span>;</span><br><span class="line"><span class="keyword">let</span> dog = hachiko.chars().nth(<span class="number">1</span>); <span class="comment">// 类似于 hachiko[1]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>: chars()操作需要遍历整个字符串</p>
</blockquote>
<h3 id="concatenation">Concatenation</h3>
<p>如果你有一个<code>String</code>类型的字符串，可以将<code>&amp;str</code>类型的字符串连接到末尾。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">"Hello "</span>.to_string();</span><br><span class="line"><span class="keyword">let</span> world = <span class="string">"world!"</span>;</span><br><span class="line"><span class="keyword">let</span> hello_world = hello + world;</span><br></pre></td></tr></table></figure>
<p>如果是两个<code>String</code>类型的字符串，连接时第二个需要转换为<code>&amp;str</code>类型</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">"Hello "</span>.to_string();</span><br><span class="line"><span class="keyword">let</span> world = <span class="string">"world!"</span>.to_string();</span><br><span class="line"><span class="keyword">let</span> hello_world = hello + &amp;world;</span><br></pre></td></tr></table></figure>
<h2 id="generics-泛型">Generics(泛型)</h2>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title">Option</span>&lt;T&gt; &#123;<span class="comment">//定义中的T可以换成其他大写字母</span></span><br><span class="line">    <span class="built_in">Some</span>(T),</span><br><span class="line">    <span class="built_in">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Option</span>&lt;<span class="keyword">i32</span>&gt; = <span class="built_in">Some</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p><code>&lt;T&gt;</code>说明该类型是泛型。</p>
<h3 id="generic-functions-泛型函数">Generic functions(泛型函数)</h3>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_anything</span></span>&lt;T&gt;(x: T) &#123;</span><br><span class="line">    <span class="comment">// do something with x</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_two_of_the_same_things</span></span>&lt;T&gt;(x: T, y: T) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_two_things</span></span>&lt;T, U&gt;(x: T, y: U) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="generic-structs-泛型结构">Generic structs(泛型结构)</h3>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> int_origin = Point &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> float_origin = Point &#123; x: <span class="number">0.0</span>, y: <span class="number">0.0</span> &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="traits">Traits</h2>
<p><code>Traits</code>的作用类似于其他语言的接口，比如Java的Interface类型。在其中定义的函数只写声明部分。用于约束泛型中必须定义了哪些函数。比如：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">print_area</span></span>&lt;T&gt;(shape: T) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"This shape has an area of &#123;&#125;"</span>, shape.area());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译的时候会发生错误，因为泛型<code>T</code>无法保证是否定义了<code>area()</code>函数。所以需要使用<code>Traits</code>。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title">HasArea</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Circle &#123;</span><br><span class="line">    x: <span class="keyword">f64</span>,</span><br><span class="line">    y: <span class="keyword">f64</span>,</span><br><span class="line">    radius: <span class="keyword">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> HasArea <span class="keyword">for</span> Circle &#123;   <span class="comment">//语法impl Trait for Item</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">        std::f64::consts::PI * (<span class="keyword">self</span>.radius * <span class="keyword">self</span>.radius)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Square &#123;</span><br><span class="line">    x: <span class="keyword">f64</span>,</span><br><span class="line">    y: <span class="keyword">f64</span>,</span><br><span class="line">    side: <span class="keyword">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> HasArea <span class="keyword">for</span> Square &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.side * <span class="keyword">self</span>.side</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">print_area</span></span>&lt;T: HasArea&gt;(shape: T) &#123;<span class="comment">//T: HasArea 意思是所有实现了HasArea trait的类型</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"This shape has an area of &#123;&#125;"</span>, shape.area());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = Circle &#123;</span><br><span class="line">        x: <span class="number">0.0f64</span>,</span><br><span class="line">        y: <span class="number">0.0f64</span>,</span><br><span class="line">        radius: <span class="number">1.0f64</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = Square &#123;</span><br><span class="line">        x: <span class="number">0.0f64</span>,</span><br><span class="line">        y: <span class="number">0.0f64</span>,</span><br><span class="line">        side: <span class="number">1.0f64</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    print_area(c);</span><br><span class="line">    print_area(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了自定义的类型外，也可以为基本类型或者其他已有类型实现自己的<code>Trait</code>。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title">HasArea</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> HasArea <span class="keyword">for</span> <span class="keyword">i32</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"this is silly"</span>);</span><br><span class="line"></span><br><span class="line">        *<span class="keyword">self</span> <span class="keyword">as</span> <span class="keyword">f64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.area();</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> <code>trait</code>同样有作用域，超出作用域就无法使用。</p>
</blockquote>
<p>实现多个<code>trait</code>使用<code>+</code>符号</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Debug;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>&lt;T: <span class="built_in">Clone</span> + Debug&gt;(x: T) &#123;</span><br><span class="line">    x.clone();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="where从句">where从句</h3>
<p>为了避免在多<code>trait</code>在声明参数时过长，使用<code>where</code>从句</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Debug;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>&lt;T: <span class="built_in">Clone</span>, K: <span class="built_in">Clone</span> + Debug&gt;(x: T, y: K) &#123;</span><br><span class="line">    x.clone();</span><br><span class="line">    y.clone();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面的写法可以写为</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>&lt;T, K&gt;(x: T, y: K) <span class="keyword">where</span> T: <span class="built_in">Clone</span>, K: <span class="built_in">Clone</span> + Debug &#123;</span><br><span class="line">    x.clone();</span><br><span class="line">    y.clone();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    foo(<span class="string">"Hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">    bar(<span class="string">"Hello"</span>, <span class="string">"workd"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="default-methods-默认方法">Default methods (默认方法)</h3>
<p>在<code>trait</code>中也可以包含默认的方法(可以是多个)，即在定义<code>trait</code>时就被实现的函数，所以在实现<code>trait</code>时就不需要实现已经被实现的函数，但仍可重写该函数。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">baz</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"We called baz."</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> UseDefault;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo <span class="keyword">for</span> UseDefault &#123;<span class="comment">//只需要实现bar()，因为baz已经在定义trait Foo时被实现了</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"We called bar."</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> OverrideDefault;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo <span class="keyword">for</span> OverrideDefault &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"We called bar."</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">baz</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"Override baz!"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="inheritance-继承">Inheritance (继承)</h3>
<p>当实现<code>Foo</code>时也需要实现<code>FooBar</code></p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title">FooBar</span> : Foo &#123;  <span class="comment">//使用 ":"符号来实现trait的继承</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foobar</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Baz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo <span class="keyword">for</span> Baz &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"foo"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> FooBar <span class="keyword">for</span> Baz &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foobar</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"foobar"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="drop">Drop</h2>
<p><code>Drop</code>是<code>trait</code>中的一个特殊函数，类似于析构函数，当变量绑定离开作用域后<code>Drop</code>方法就会被调用，常用来释放不再使用的资源。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> HasDrop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="built_in">Drop</span> <span class="keyword">for</span> HasDrop &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">drop</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Dropping!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = HasDrop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do stuff</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// x 在这里离开main的作用域</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong> 同一作用域中的变量离开作用域后被释放的顺序与被定义的顺序相反。</p>
</blockquote>
<h2 id="if-let">if let</h2>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将</span></span><br><span class="line"><span class="keyword">match</span> option &#123;</span><br><span class="line">    <span class="built_in">Some</span>(x) =&gt; &#123; foo(x) &#125;,</span><br><span class="line">    <span class="built_in">None</span> =&gt; &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写成</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="built_in">Some</span>(x) = option &#123;</span><br><span class="line">    foo(x);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用while let 将</span></span><br><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> option &#123;</span><br><span class="line">        <span class="built_in">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x),</span><br><span class="line">        _ =&gt; <span class="keyword">break</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写成</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> <span class="built_in">Some</span>(x) = option &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="trait-objects">Trait Objects</h2>
<h3 id="dynamic-dispatch">Dynamic dispatch</h3>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">method</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo <span class="keyword">for</span> <span class="keyword">u8</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">method</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123; <span class="built_in">format!</span>(<span class="string">"u8: &#123;&#125;"</span>, *<span class="keyword">self</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo <span class="keyword">for</span> <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">method</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123; <span class="built_in">format!</span>(<span class="string">"string: &#123;&#125;"</span>, *<span class="keyword">self</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">do_something</span></span>(x: &amp;Foo) &#123;<span class="comment">//&amp;Foo可以作为一种类型来使用，x也就是Trait Objects</span></span><br><span class="line">    x.method();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5u8</span>;</span><br><span class="line">    do_something(&amp;x <span class="keyword">as</span> &amp;Foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="closures-闭包">Closures (闭包)</h2>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> plus_one = |x: <span class="keyword">i32</span>| x + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">2</span>, plus_one(<span class="number">1</span>));<span class="comment">//断言，调试用</span></span><br><span class="line"><span class="comment">//闭包也可以写成</span></span><br><span class="line"><span class="keyword">let</span> plus_two = |x| &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> result: <span class="keyword">i32</span> = x;</span><br><span class="line"></span><br><span class="line">    result += <span class="number">1</span>;</span><br><span class="line">    result += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>创建了一个绑定<code>plus_one</code>，并指派给一个闭包。在<code>|</code>之间的是闭包的参数，后面跟着闭包的主体。闭包可以不指定参数和返回值的类型。</p>
<p>将闭包作为函数传递</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">call_with_one</span></span>&lt;F&gt;(some_closure: F) -&gt; <span class="keyword">i32</span></span><br><span class="line">    <span class="keyword">where</span> F : <span class="built_in">Fn</span>(<span class="keyword">i32</span>) -&gt; <span class="keyword">i32</span> &#123;</span><br><span class="line"></span><br><span class="line">    some_closure(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> answer = call_with_one(|x| x + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">3</span>, answer);</span><br></pre></td></tr></table></figure>
<p>有点像函数式编程的匿名函数。既然能传入，当然也能当做返回值。</p>
<h2 id="universal-function-call-syntax">Universal Function Call Syntax</h2>
<p>当函数有相同名字时</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title">Bar</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Baz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo <span class="keyword">for</span> Baz &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"Baz’s impl of Foo"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Bar <span class="keyword">for</span> Baz &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(&amp;<span class="keyword">self</span>) &#123; <span class="built_in">println!</span>(<span class="string">"Baz’s impl of Bar"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = Baz;</span><br><span class="line"><span class="comment">//b.f()会发生错误</span></span><br><span class="line">Foo::f(&amp;b);</span><br><span class="line">Bar::f(&amp;b);</span><br><span class="line"></span><br><span class="line">&lt;Type <span class="keyword">as</span> Trait&gt;::method(args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">clone</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#[derive(Clone)]</span></span><br><span class="line"><span class="keyword">struct</span> Bar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo <span class="keyword">for</span> Bar &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">clone</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Making a clone of Bar"</span>);</span><br><span class="line"></span><br><span class="line">        &lt;Bar <span class="keyword">as</span> <span class="built_in">Clone</span>&gt;::clone(<span class="keyword">self</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用Clone trait中的 clone()</span></span><br></pre></td></tr></table></figure>
<h2 id="attributes">Attributes</h2>
<p>属性的声明，类似于<code>#[]</code>都是属性，属性用于提供某些辅助作用。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#[foo]</span><span class="comment">//该属性作用于它的下一条语句</span></span><br><span class="line"><span class="keyword">struct</span> Foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> bar &#123;</span><br><span class="line">    <span class="preprocessor">#![bar]</span><span class="comment">//该属性作用于包含它的语句，在这里就是mod声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="type-aliases-类型别名">type Aliases (类型别名)</h2>
<p>类似于C语言的<code>typedef</code></p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title">Name</span> = <span class="built_in">String</span>;</span><br><span class="line"><span class="keyword">let</span> x: Name = <span class="string">"Hello"</span>.to_string();</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title">Result</span>&lt;T&gt; = result::<span class="built_in">Result</span>&lt;T, ConcreteError&gt;;</span><br></pre></td></tr></table></figure>
<h2 id="casting-between-types-类型转换">Casting Between Types (类型转换)</h2>
<p>一般的类型转换使用<code>as</code>，强制类型转换使用<code>transmute</code>。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="keyword">i32</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x <span class="keyword">as</span> <span class="keyword">i64</span>;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">0u8</span>, <span class="number">0u8</span>, <span class="number">0u8</span>, <span class="number">0u8</span>];</span><br><span class="line"><span class="keyword">let</span> b = a <span class="keyword">as</span> <span class="keyword">u32</span>; <span class="comment">// 使用as转换将出错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::mem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">0u8</span>, <span class="number">0u8</span>, <span class="number">0u8</span>, <span class="number">0u8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = mem::transmute::&lt;[<span class="keyword">u8</span>; <span class="number">4</span>], <span class="keyword">u32</span>&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="operators-and-overloading-操作符和重载">Operators and Overloading (操作符和重载)</h2>
<p>使用<code>Add</code>trait来对<code>+</code>进行重载</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ops::Add;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> Point &#123;</span><br><span class="line">    x: <span class="keyword">i32</span>,</span><br><span class="line">    y: <span class="keyword">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Add <span class="keyword">for</span> Point &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title">Output</span> = Point;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(<span class="keyword">self</span>, other: Point) -&gt; Point &#123;</span><br><span class="line">        Point &#123; x: <span class="keyword">self</span>.x + other.x, y: <span class="keyword">self</span>.y + other.y &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = Point &#123; x: <span class="number">1</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> p2 = Point &#123; x: <span class="number">2</span>, y: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p3 = p1 + p2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, p3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还可以为不同类型之间的数据重载加法运算</span></span><br><span class="line"><span class="keyword">impl</span> Add&lt;<span class="keyword">i32</span>&gt; <span class="keyword">for</span> Point &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title">Output</span> = <span class="keyword">f64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(<span class="keyword">self</span>, rhs: <span class="keyword">i32</span>) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">        <span class="comment">// add an i32 to a Point and get an f64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p: Point = <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">let</span> x: <span class="keyword">f64</span> = p + <span class="number">2i32</span>;</span><br></pre></td></tr></table></figure>
<h2 id="参考页面">参考页面</h2>
<ul>
<li><a href="http://doc.rust-lang.org/book/README.html" target="_blank" rel="external">The Rust Programming Language</a></li>
<li><a href="http://blog.csdn.net/liigo/article/details/45757123" target="_blank" rel="external">为什么我说Rust是靠谱的编程语言</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="rust简介">Rust简介</h2>
<p><code>Rust</code>是一种编译语言，与<code>C</code>和<code>Go</code>一样编译后生成的是二进制文件。<code>Rust</code>专注于<code>安全</code>，<code>速度</code>，<code>并发</code>。并且不需要垃圾回收器，这也让<code>Rust</code>在某些情况下比其他语言更好用。比如与其他语言混合编写嵌入其中、编写底层软件，驱动或操作系统。<code>Rust</code>在编译期间会将语法错误和不安全因素最大程度地找出来，从而避免在程序运行时出现问题。<code>Rust</code>语言可以胜任三个软件层次的开发。并且在今年5月15号发布了第一个1.0.0正式版本。</p>]]>
    
    </summary>
    
      <category term="Rust" scheme="http://lin-h.com/tags/Rust/"/>
    
      <category term="Rust" scheme="http://lin-h.com/categories/Rust/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Jekyll在Github上搭建个人Blog]]></title>
    <link href="http://lin-h.com/2015/04/09/build-personal-blog-with-jekyll-on-github/"/>
    <id>http://lin-h.com/2015/04/09/build-personal-blog-with-jekyll-on-github/</id>
    <published>2015-04-09T12:32:46.000Z</published>
    <updated>2015-05-18T14:32:46.000Z</updated>
    <content type="html"><![CDATA[<p>拥有自己的个人Blog可以把自己学到的技术，想法、经历分享出来，也可以用来写日记。远比QQ空间有意思多了，尤其是对于程序员来说，可以随意折腾。<code>Jekyll</code>就是一款生成静态页面(HTML文件)的工具，<code>Jekyll</code>是用Ruby编写的。但使用者不需要掌握Ruby，只需要在控制台(terminal)中输入几条简单的命令就能搭建出一个Blog来，但如果你还懂得网站前端的知识如<code>HTML</code>，<code>CSS</code>，<code>Javascript</code>的话，你就能完全自定义你自己的Blog。</p>
<a id="more"></a>
<p>现在先把<code>Jekyll</code>的运行环境搭建好。因为<code>Jekyll</code>是Ruby编写的，所以必须先安装Ruby的运行环境。</p>
<h2 id="安装ruby和jekyll">安装Ruby和Jekyll</h2>
<p>Windows平台
在<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">rubyinstaller</a>网站下载最新的版本即可，根据自己系统的情况选择32位或是64位。安装时注意选择<code>Add Ruby executable to your PATH</code>。</p>
<p>Linux平台在命令行中运行</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install <span class="keyword">ruby</span></span><br></pre></td></tr></table></figure>
<p>安装完成后打开命令行输入<code>ruby -v</code>，能输出ruby版本就说明安装成功。</p>
<p>除了<code>Ruby</code>以外<strong>Windows系统</strong>还需要<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">Ruby DevKit</a></p>
<p><img src="development-kit.png" alt=""></p>
<p>根据自己所安装的<code>Ruby</code>的版本选择相应的版本。下载之后运行，解压到一个你喜欢的目录。<strong>目录必须不包含空格</strong></p>
<p>解压完成之后打开命令行，将路径切换到<code>RubyDevKit</code>的目录。如：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">E</span>:\RubyDevKit</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby dk<span class="class">.rb</span> init</span><br></pre></td></tr></table></figure>
<p>，这条命令会自动检测<code>Ruby</code>的安装路径，并添加到配置文件中。</p>
<p>运行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby dk<span class="class">.rb</span> install</span><br></pre></td></tr></table></figure>
<p>，将<code>DevKit</code>安装到<code>Ruby</code>中。至此，<code>Ruby</code>的运行环境总算的搭建好了，接下来使用<code>gem</code>安装<code>Jekyll</code>。</p>
<p>为了使下载速度更快，我们将下载源替换为淘宝的RubyGems 镜像。在命令行中运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/&#10;$ gem sources -a https://ruby.taobao.org/&#10;$ gem sources -l&#10;*** CURRENT SOURCES ***&#10;&#10;https://ruby.taobao.org&#10;# &#35831;&#30830;&#20445;&#21482;&#26377; ruby.taobao.org</span><br></pre></td></tr></table></figure>
<p>然后在命令行中运行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install jekyll --platform=ruby #Linux &#20013;&#21482;&#38656; gem install jekyll</span><br></pre></td></tr></table></figure>
<p>经过漫长的等待之后安装完成，在命令行中运行<code>jekyll -h</code>将会显示如下命令(Windows环境下,Linux环境下的命令大同小异)：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;jekyll -h</span><br><span class="line">jekyll <span class="number">2.5</span><span class="number">.3</span> <span class="comment">-- Jekyll is a blog-aware, static site generator in Ruby</span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">  jekyll &lt;subcommand&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">        -s, <span class="comment">--source [DIR]  Source directory (defaults to ./)</span></span><br><span class="line">        -d, <span class="comment">--destination [DIR]  Destination directory (defaults to ./_site)</span></span><br><span class="line">            <span class="comment">--safe         Safe mode (defaults to false)</span></span><br><span class="line">        -p, <span class="comment">--plugins PLUGINS_DIR1[,PLUGINS_DIR2[,...]]  Plugins directory (defaults to ./_plugins)</span></span><br><span class="line">            <span class="comment">--layouts DIR  Layouts directory (defaults to ./_layouts)</span></span><br><span class="line">        -h, <span class="comment">--help         Show this message</span></span><br><span class="line">        -v, <span class="comment">--version      Print the name and version</span></span><br><span class="line">        -t, <span class="comment">--trace        Show the full backtrace when an error occurs</span></span><br><span class="line"></span><br><span class="line">Subcommands:</span><br><span class="line">  build, b              Build your site</span><br><span class="line">  docs                  Launch <span class="built_in">local</span> server <span class="operator">with</span> docs <span class="keyword">for</span> Jekyll v2<span class="number">.5</span><span class="number">.3</span></span><br><span class="line">  doctor, hyde          Search site <span class="operator">and</span> print specific deprecation warnings</span><br><span class="line">  help                  Show <span class="operator">the</span> help message, optionally <span class="keyword">for</span> <span class="operator">a</span> given subcommand.</span><br><span class="line">  <span class="built_in">new</span>                   Creates <span class="operator">a</span> <span class="built_in">new</span> Jekyll site scaffold <span class="operator">in</span> PATH</span><br><span class="line">  serve, server, s      Serve your site locally</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;</span><br></pre></td></tr></table></figure>
<p>接下来新建一个自己的Blog，运行下面命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll new MyBlog #&#22312;&#24403;&#21069;&#30446;&#24405;&#26032;&#24314;&#19968;&#20010;&#21517;&#20026;&#8220;MyBlog&#8221;&#30340;&#31449;&#28857;&#10;cd MyBlog &#38;&#38; jekyll serve #&#20999;&#25442;&#21040;MyBlog&#30446;&#24405;&#65292;&#24182;&#21551;&#21160;jekyll&#30340;&#26412;&#22320;&#26381;&#21153;&#22120;</span><br></pre></td></tr></table></figure>
<p>打开你的浏览器，在地址中输入<code>http://127.0.0.1:4000/</code>就能看到如下页面：</p>
<p><img src="startup.png" alt=""></p>
<p>到此为止一个你的Blog站点就搭建好了，其中<code>_site</code>是最终生成的网站代码，别的文件夹中都是网站的源代码。接下来我们要把这个站点发布到网上去。在这里我选择的是<a href="https://github.com/" target="_blank" rel="external"><code>Github</code></a>，<code>Github</code>只支持静态页面的解析，所以需要生成静态站点的工具。与之类似的还有国内的<a href="http://git.oschina.net/" target="_blank" rel="external">Git@OSC</a>使用方法与<code>Github</code>类似。但与<code>Github</code>不同的是<code>Git@OSC</code>支持后台语言编写的网站如<code>PHP</code>、<code>Node.js</code>、<code>Java</code>等，还可使用数据库但本人还没测试过。有兴趣的同学可以试试。</p>
<h2 id="github-代码托管网站">Github 代码托管网站</h2>
<p><code>Github</code>是一个基于git版本控制工具的代码托管网站。
以下是<code>Github</code>网站的官方介绍</p>
<blockquote>
<p>GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Over eight million people use GitHub to build amazing things together.</p>
</blockquote>
<p>简单来说就是一个存放代码的地方，代码按仓库(repository)管理，仓库又分为私人仓库(private repository)和公共仓库(public repository)。私人仓库需要收费，而公共仓库免费，并且不限制数量。而<code>Github</code>最棒的地方就是多人协作。也就是开源程序，人人都能为代码提交修改。像Linux内核、Node.js 这些著名的程序都在<code>Github</code>上托管包括<code>Jekyll</code>。而且在<code>Github</code>上还能找到很多有意思的项目。所以先注册一个<code>Github</code>帐号吧。
完成了帐号注册后就能创建仓库了</p>
<p><img src="create-a-repository.png" alt=""></p>
<p>创建的仓库名称必须是username.github.io，其中username就是你的用户名。Description可填可不填。
创建完成之后，就可以把代码上传上去了，这时就需要使用git工具了</p>
<h2 id="git-版本控制工具">git 版本控制工具</h2>
<p>可以在<a href="http://www.git-scm.com/downloads" target="_blank" rel="external">这里</a>下载。所谓版本控制系统也就是存放有每个版本的代码。每次修改后的代码commit后会自动记录为一个版本。使用版本控制的好处就是任何时候都可以把修改错误的代码恢复至任一个版本。避免了代码保存了之后无法恢复。</p>
<p>下载安装<code>git</code>并添加到PATH中之后，打开命令行，切换到我们之前新建的MyBlog目录中并运行<code>git init .</code>将当前目录初始化成一个<code>git</code>仓库其中<code>.</code>代表当前目录。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">E</span><span class="symbol">:</span>\<span class="constant">Project</span>\<span class="constant">MyBlog</span>&gt;git init .</span><br><span class="line"><span class="constant">Initialized</span> empty <span class="constant">Git</span> repository <span class="keyword">in</span> <span class="constant">E</span><span class="symbol">:/Project/MyBlog/</span>.git/</span><br></pre></td></tr></table></figure>
<p>可以看到新建的是一个空的仓库，运行命令<code>git status</code>(下面的所有命令都是在MyBlog目录中运行)查看当前仓库的状态。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">E:\Project\MyBlog&gt;git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">        <span class="class">.gitignore</span></span><br><span class="line">        _config<span class="class">.yml</span></span><br><span class="line">        _includes/</span><br><span class="line">        _layouts/</span><br><span class="line">        _posts/</span><br><span class="line">        _sass/</span><br><span class="line">        about<span class="class">.md</span></span><br><span class="line">        css/</span><br><span class="line">        feed<span class="class">.xml</span></span><br><span class="line">        index<span class="class">.html</span></span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure>
<p>可以看到仓库检测到了变动，Untracked files为没有被记录的文件。运行命令<code>git add -A</code>记录所有发生变动的文件。然后再运行一次<code>git status</code></p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">E:\Project\MyBlog&gt;git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git rm --cached &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   .gitignore</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _config.yml</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _includes/footer.html</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _includes/head.html</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _includes/header.html</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _layouts/<span class="keyword">default</span>.html</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _layouts/page.html</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _layouts/post.html</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _posts/<span class="number">2015</span>-<span class="number">04</span>-<span class="number">10</span>-welcome-<span class="keyword">to</span>-jekyll.markdown</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _sass/_base.scss</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _sass/_layout.scss</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   _sass/_syntax-highlighting.scss</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   about.md</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   css/main.scss</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   feed.xml</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   index.html</span><br><span class="line"></span><br><span class="line">E:\Project\MyBlog&gt;</span><br></pre></td></tr></table></figure>
<p>看到输出的第5行<code>Changes to be committed</code>表明这些文件可以被commit了，一旦commit后文件的修改就会被记录到仓库中，并自动生成一个新版本。运行<code>git commit -m &quot;add all the file to repository&quot;</code>。其中commit命令必须有<code>-m</code>参数并跟着一个字符串，用于说明该commit做了什么变动，字符串可以是中文。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">E:\Project\MyBlog&gt;git commit -m <span class="string">"add all the file to repository"</span></span><br><span class="line">[master (root-commit) e0954d0] add all the file to repository</span><br><span class="line"> <span class="number">16</span> files changed, <span class="number">807</span> <span class="function"><span class="title">insertions</span><span class="params">(+)</span></span></span><br><span class="line"> create mode <span class="number">100644</span> <span class="class">.gitignore</span></span><br><span class="line"> create mode <span class="number">100644</span> _config<span class="class">.yml</span></span><br><span class="line"> create mode <span class="number">100644</span> _includes/<span class="tag">footer</span><span class="class">.html</span></span><br><span class="line"> create mode <span class="number">100644</span> _includes/head<span class="class">.html</span></span><br><span class="line"> create mode <span class="number">100644</span> _includes/<span class="tag">header</span><span class="class">.html</span></span><br><span class="line"> create mode <span class="number">100644</span> _layouts/default<span class="class">.html</span></span><br><span class="line"> create mode <span class="number">100644</span> _layouts/page<span class="class">.html</span></span><br><span class="line"> create mode <span class="number">100644</span> _layouts/post<span class="class">.html</span></span><br><span class="line"> create mode <span class="number">100644</span> _posts/<span class="number">2015</span>-<span class="number">04</span>-<span class="number">10</span>-welcome-to-jekyll<span class="class">.markdown</span></span><br><span class="line"> create mode <span class="number">100644</span> _sass/_base<span class="class">.scss</span></span><br><span class="line"> create mode <span class="number">100644</span> _sass/_layout<span class="class">.scss</span></span><br><span class="line"> create mode <span class="number">100644</span> _sass/_syntax-highlighting<span class="class">.scss</span></span><br><span class="line"> create mode <span class="number">100644</span> about<span class="class">.md</span></span><br><span class="line"> create mode <span class="number">100644</span> css/main<span class="class">.scss</span></span><br><span class="line"> create mode <span class="number">100644</span> feed<span class="class">.xml</span></span><br><span class="line"> create mode <span class="number">100644</span> index.html</span><br></pre></td></tr></table></figure>
<p>这样所有的变动都记录到仓库中了: )。注意<code>[master (root-commit) e0954d0]</code>每一次commit都会生成一个序号类似<code>e0954d0</code>，就像版本号的ID，若要恢复到以前的版本就需要使用这个序号。</p>
<p>做好了<code>git</code>仓库就可以把它上传到<code>Github</code>上发布到网上了。</p>
<h2 id="上传到github">上传到Github</h2>
<p>首先需要设置远程仓库的地址(即在你的Github账号中创建的仓库的地址)。在网页上打开你之前创建的仓库。在页面右侧找到该仓库的URL(建议先点击SSH切换到SSH链接，方便以后添加SSH KEY)</p>
<p><img src="where-to-clone.png" alt=""></p>
<p>在命令行中运行<code>git remote add origin &lt;server&gt;</code>其中<server>就是你的远程仓库的地址，origin为仓库名字(可以改为其他的名字)。</server></p>
<blockquote>
<p>注意：Github解析静态页面所使用的就是Jekyll所以你可以直接上传网站的源代码到远程仓库的master分支中，或将源代码上传到其他分支如source中，把最终生成的网站代码(_site文件夹中的内容)上传到master分支中。分开两个分支的好处是你可以现在本地使用Jekyll插件，Jekyll插件包括自动归档，分类等等功能，然后将生成的网站上传到master分支。因为Github出于安全考虑禁止使用插件。接下去的教程将代码上传至两个分支。</p>
</blockquote>
<p>将网站源代码和生成的代码上传到两个分支。需要现在命令行中将当前目录切换至<code>MyBlog</code>中的<code>_site</code>文件夹中。重复上面的<code>git</code>命令将<code>_site</code>文件夹变成另一个<code>git</code>仓库，并添加远程仓库(为同一个远程仓库地址)。在命令行中运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master #master &#21363;&#20026;&#19978;&#20256;&#20998;&#25903;&#30340;&#21517;&#23383;&#65292;&#33509;&#36828;&#31243;&#20179;&#24211;&#20013;&#36824;&#27809;&#26377;&#35813;&#20998;&#25903;&#65292;&#21017;&#20250;&#34987;&#21019;&#24314;</span><br></pre></td></tr></table></figure>
<p>同样的在<code>MyBlog</code>目录中运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin source #&#23558;&#28304;&#20195;&#30721;&#19978;&#20256;&#21040;source&#20998;&#25903;&#65292;&#20415;&#20110;&#20998;&#24320;&#31649;&#29702;</span><br></pre></td></tr></table></figure>
<p>最后在<code>Github</code>网站上打开你的远程仓库，应该可以看到两个分支<img src="two-branch.png" alt="">这时你打开http://username.github.io就能看到你的网站(username为你的用户名)已经发布到网上了: )</p>
<h2 id="目录结构">目录结构</h2>
<p>为了能够更好地使用<code>Jekyll</code>，现在来了解一下生成的网站的目录结构。</p>
<p><img src="mulu-struct.png" alt=""></p>
<p>你的网站目录结构应该像上图那样。<code>.sass-cache</code>目录是编译sass时的缓存，我们不需要理会它。<code>_includes</code>目录包含着整个网站的结构，进入这个目录可以看到有3个文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">footer</span><span class="class">.html</span></span><br><span class="line">head<span class="class">.html</span></span><br><span class="line"><span class="tag">header</span>.html</span><br></pre></td></tr></table></figure>
<p><code>footer.html</code>是网站的底部内容</p>
<p><img src="website-bottom.png" alt=""></p>
<p><code>head.html</code>则是网页结构中的头部，用于对该页面进行说明，和导入静态文件如css、js等，这一部分并不会在网页上显示出来。<code>header.html</code>文件中的内容就是网页的标题栏部分。</p>
<p><img src="website-head.png" alt=""></p>
<p>这个文件夹的内容相当于是构成网页的基本骨架。<code>Jekyll</code>中默认有两种页面布局，一种是page、一种是post，存放在<code>_layouts</code>目录中，都是用同一种布局(layout)default，就是目录中的default.html文件。我们写文章就是使用post布局，所以一般情况来说这些文件都不需要改动，除非你想增加别的内容进去。</p>
<p>目录<code>_sass</code>和<code>css</code>都是网站所使用的样式表默认情况下，这两个目录中的文件都使用<code>sass</code>编写，<code>sass</code>是一种用来快速编写css的工具相当于另一种<code>css语言</code>，详细介绍可以在<a href="http://sass-lang.com/" target="_blank" rel="external">sass官网</a>查看。当然如果你不会sass也可以直接用css编写，编辑的方式，直接用文本编辑器打开.scss文件就可以了，属于css的语句<code>sass</code>的编译器不会处理。</p>
<p><code>_config.yml</code>文件比较重要，它是整个网站的配置文件，可以设置网站的标题，描述，网址和其他与<code>jekyll</code>相关的网站参数，详情请看<a href="http://jekyllrb.com/docs/configuration/" target="_blank" rel="external">这里</a></p>
<p><code>_posts</code>目录就是我们写文章的地方啦。写文章的时候一般都会用<code>Markdown</code>语法。<code>Markdown</code>其实就是以一种简易的方式去写HTML，学习起来相当容易。<a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">Github的简易Markdown教程</a></p>
<h2 id="jekyll主题风格和配色">Jekyll主题风格和配色</h2>
<p>既然是个人Blog，那么当然应该更具个人特色，如果你是个懂设计的程序员，制作一个漂亮的网站自然不难。但对于像我这样还不懂设计的人来说只能是到处改改，边改边瞧了。除此之外，也可以直接使用别人已经写好的主题风格。提供两个可以免费下载<code>Jekyll</code>主题的网站</p>
<ul>
<li><a href="http://jekyllthemes.org/" target="_blank" rel="external">Jekyll Themes</a></li>
<li><a href="https://github.com/jekyll/jekyll/wiki/Themes" target="_blank" rel="external">Themes · jekyll/jekyll Wiki</a></li>
</ul>
<p>要使用某个主题只需要把该主题下载下来，直接复制到你的网站站点即可，然后把你的<code>_posts</code>目录下的文章复制到同名目录即可。然后在网站当前目录下打开命令行运行<code>jekyll serve</code>就能看到你新换的主题了。</p>
<h3 id="代码配色">代码配色</h3>
<p><code>Jekyll</code>默认的代码高亮工具是Pygment，对于在Windows环境下不是很稳定，所以推荐使用<code>Rouge</code>。跟安装<code>Jekyll</code>一样，使用<code>gem</code>来下载安装<code>Rouge</code>，在命令行中输入</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="keyword">install</span> rouge</span><br></pre></td></tr></table></figure>
<p>安装完成后打开编辑你的Blog根目录下的<code>_config.yml</code>文件，在文件的最后新增一行加上</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">highlighter</span>: <span class="string">rouge</span></span><br></pre></td></tr></table></figure>
<p>将代码高亮工具设置为<code>Rouge</code>。这样就完成了。</p>
<p>如果不喜欢<code>Rouge</code>的默认代码配色可以在[这里](/download/codeHighlightStyle.zip)下载我事先从<code>Rouge</code>中导出的其他代码配色方案。并将文件复制到<code>_sass</code>文件夹中，编辑<code>css</code>文件夹中的<code>main.scss</code>文件，在末尾import你刚添加的配色方案的文件名。比如：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">import</span></span><br><span class="line">        <span class="string">"base"</span>,</span><br><span class="line">        <span class="string">"layout"</span>,</span><br><span class="line">        <span class="string">"monokai.sublime"</span></span><br><span class="line">;</span></span><br></pre></td></tr></table></figure>
<p>下面是部分配色方案的截图</p>
<p>base16.solarized.dark<br>
<img src="base16.solarized.dark.png" alt=""></p>
<p>base16.solarized<br>
<img src="base16.solarized.png" alt=""></p>
<p>colorful<br>
<img src="colorful.png" alt=""></p>
<p>default<br>
<img src="default.png" alt=""></p>
<p>manni<br>
<img src="manni.png" alt=""></p>
<p>monokai.sublime<br>
<img src="monokai.sublime.png" alt=""></p>
<p>native<br>
<img src="native.png" alt=""></p>
<p>perldoc<br>
<img src="perldoc.png" alt=""></p>
<p>thankful_eyes<br>
<img src="thankful_eyes.png" alt=""></p>
<p>vim<br>
<img src="vim.png" alt=""></p>
<h2 id="书写文章">书写文章</h2>
<p>书写文章其实非常简单，在你已经建好的Blog中，<code>_posts</code> 文件夹内就默认有一篇文章。文章的命名是有讲究的，以“年-月-日”开头，并用“-”分开，后面再加上标题。打开后可以看到编写文章的相关格式。开头部分是文章的相关设置，可以设置该篇文章使用什么布局，标题，创建时间和分类。接下去就是文章的主要内容，使用<code>markdown</code>来编写，在编写文章的时候可以使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll serve</span><br></pre></td></tr></table></figure>
<p>来一遍写，一遍观察实际效果。一旦编写完成后就push到远程仓库中就算发布了。</p>
<h3 id="参考页面">参考页面</h3>
<ul>
<li><a href="https://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="external">下载 Ruby - Ruby 官方网站</a></li>
<li><a href="http://jekyll-windows.juthilo.com/" target="_blank" rel="external">Home · Run Jekyll on Windows</a></li>
<li><a href="https://github.com/jekyll/jekyll" target="_blank" rel="external">jekyll</a></li>
<li><a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit" target="_blank" rel="external">Development Kit · oneclick/rubyinstaller Wiki</a></li>
<li><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="external">git 使用简易指南</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>拥有自己的个人Blog可以把自己学到的技术，想法、经历分享出来，也可以用来写日记。远比QQ空间有意思多了，尤其是对于程序员来说，可以随意折腾。<code>Jekyll</code>就是一款生成静态页面(HTML文件)的工具，<code>Jekyll</code>是用Ruby编写的。但使用者不需要掌握Ruby，只需要在控制台(terminal)中输入几条简单的命令就能搭建出一个Blog来，但如果你还懂得网站前端的知识如<code>HTML</code>，<code>CSS</code>，<code>Javascript</code>的话，你就能完全自定义你自己的Blog。</p>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://lin-h.com/tags/Blog/"/>
    
      <category term="jekyll" scheme="http://lin-h.com/categories/jekyll/"/>
    
  </entry>
  
</feed>
