<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LinHang&#39;s Blog</title>
    <description>LinHang的个人Blog，记录自己的想法，分享技术、经验。总的来说能写进来的都会写。也欢迎一起交流技术，谈人生，聊理想  :)</description>
    <link>https://lin-h.github.io/</link>
    <atom:link href="https://lin-h.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Apr 2015 17:34:28 +0800</pubDate>
    <lastBuildDate>Fri, 10 Apr 2015 17:34:28 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>使用Jekyll在Github上搭建个人Blog</title>
        <description>&lt;p&gt;拥有自己的个人Blog可以把自己学到的技术，想法、经历分享出来，也可以用来写日记。远比QQ空间有意思多了，尤其是对于程序员来说，可以随意折腾。&lt;code&gt;Jekyll&lt;/code&gt;就是一款生成静态页面(HTML文件)的工具，&lt;code&gt;Jekyll&lt;/code&gt;是用Ruby编写的。但使用者不需要掌握Ruby，只需要在控制台(terminal)中输入几条简单的命令就能搭建出一个Blog来，但如果你还懂得网站前端的知识如&lt;code&gt;HTML&lt;/code&gt;，&lt;code&gt;CSS&lt;/code&gt;，&lt;code&gt;Javascript&lt;/code&gt;的话，你就能完全自定义你自己的Blog。&lt;/p&gt;

&lt;p&gt;现在先把&lt;code&gt;Jekyll&lt;/code&gt;的运行环境搭建好。因为&lt;code&gt;Jekyll&lt;/code&gt;是Ruby编写的，所以必须先安装Ruby的运行环境。&lt;/p&gt;

&lt;h2&gt;安装Ruby和Jekyll&lt;/h2&gt;

&lt;p&gt;Windows平台
在&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;rubyinstaller&lt;/a&gt;网站下载最新的版本即可，根据自己系统的情况选择32位或是64位。安装时注意选择&lt;code&gt;Add Ruby executable to your PATH&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Linux平台在命令行中运行&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo apt-get install ruby&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装完成后打开命令行输入&lt;code&gt;ruby -v&lt;/code&gt;，能输出ruby版本就说明安装成功。&lt;/p&gt;

&lt;p&gt;除了&lt;code&gt;Ruby&lt;/code&gt;以外&lt;strong&gt;Windows系统&lt;/strong&gt;还需要&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;Ruby DevKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lin-h.github.io/assets/jekyll/development-kit.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;根据自己所安装的&lt;code&gt;Ruby&lt;/code&gt;的版本选择相应的版本。下载之后运行，解压到一个你喜欢的目录。&lt;strong&gt;目录必须不包含空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;解压完成之后打开命令行，将路径切换到&lt;code&gt;RubyDevKit&lt;/code&gt;的目录。如：&lt;code&gt;cd E:\RubyDevKit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行&lt;code&gt;ruby dk.rb init&lt;/code&gt;，这条命令会自动检测&lt;code&gt;Ruby&lt;/code&gt;的安装路径，并添加到配置文件中。&lt;/p&gt;

&lt;p&gt;运行&lt;code&gt;ruby dk.rb install&lt;/code&gt;，将&lt;code&gt;DevKit&lt;/code&gt;安装到&lt;code&gt;Ruby&lt;/code&gt;中。至此，&lt;code&gt;Ruby&lt;/code&gt;的运行环境总算的搭建好了，接下来使用&lt;code&gt;gem&lt;/code&gt;安装&lt;code&gt;Jekyll&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为了使下载速度更快，我们将下载源替换为淘宝的RubyGems 镜像。在命令行中运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem sources --remove https://rubygems.org/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem sources -a https://ruby.taobao.org/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem sources -l
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; CURRENT SOURCES &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;

https://ruby.taobao.org
&lt;span class=&quot;c&quot;&gt;# 请确保只有 ruby.taobao.org&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在命令行中运行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;gem install jekyll --platform&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ruby &lt;span class=&quot;c&quot;&gt;#Linux 中只需 gem install jekyll&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过漫长的等待之后安装完成，在命令行中运行&lt;code&gt;jekyll -h&lt;/code&gt;将会显示如下命令(Windows环境下,Linux环境下的命令大同小异)：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;C:\Users\Administrator&amp;gt;jekyll -h
jekyll 2.5.3 -- Jekyll is a blog-aware, static site generator in Ruby

Usage:

  jekyll &amp;lt;subcommand&amp;gt; [options]

Options:
        -s, --source [DIR]  Source directory (defaults to ./)
        -d, --destination [DIR]  Destination directory (defaults to ./_site)
            --safe         Safe mode (defaults to false)
        -p, --plugins PLUGINS_DIR1[,PLUGINS_DIR2[,...]]  Plugins directory (defaults to ./_plugins)
            --layouts DIR  Layouts directory (defaults to ./_layouts)
        -h, --help         Show this message
        -v, --version      Print the name and version
        -t, --trace        Show the full backtrace when an error occurs

Subcommands:
  build, b              Build your site
  docs                  Launch local server with docs for Jekyll v2.5.3
  doctor, hyde          Search site and print specific deprecation warnings
  help                  Show the help message, optionally for a given subcommand.
  new                   Creates a new Jekyll site scaffold in PATH
  serve, server, s      Serve your site locally

C:\Users\Administrator&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来新建一个自己的Blog，运行下面命令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;jekyll new MyBlog &lt;span class=&quot;c&quot;&gt;#在当前目录新建一个名为“MyBlog”的站点&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;MyBlog &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; jekyll serve &lt;span class=&quot;c&quot;&gt;#切换到MyBlog目录，并启动jekyll的本地服务器&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开你的浏览器，在地址中输入&lt;code&gt;http://127.0.0.1:4000/&lt;/code&gt;就能看到如下页面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lin-h.github.io/assets/jekyll/startup.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;到此为止一个你的Blog站点就搭建好了，其中&lt;code&gt;_site&lt;/code&gt;是最终生成的网站代码，别的文件夹中都是网站的源代码。接下来我们要把这个站点发布到网上去。在这里我选择的是&lt;a href=&quot;https://github.com/&quot;&gt;&lt;code&gt;Github&lt;/code&gt;&lt;/a&gt;，&lt;code&gt;Github&lt;/code&gt;只支持静态页面的解析，所以需要生成静态站点的工具。与之类似的还有国内的&lt;a href=&quot;http://git.oschina.net/&quot;&gt;Git@OSC&lt;/a&gt;使用方法与&lt;code&gt;Github&lt;/code&gt;类似。但与&lt;code&gt;Github&lt;/code&gt;不同的是&lt;code&gt;Git@OSC&lt;/code&gt;支持后台语言编写的网站如&lt;code&gt;PHP&lt;/code&gt;、&lt;code&gt;Node.js&lt;/code&gt;、&lt;code&gt;Java&lt;/code&gt;等，还可使用数据库但本人还没测试过。有兴趣的同学可以试试。&lt;/p&gt;

&lt;h2&gt;Github 代码托管网站&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Github&lt;/code&gt;是一个基于git版本控制工具的代码托管网站。
以下是&lt;code&gt;Github&lt;/code&gt;网站的官方介绍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Over eight million people use GitHub to build amazing things together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单来说就是一个存放代码的地方，代码按仓库(repository)管理，仓库又分为私人仓库(private repository)和公共仓库(public repository)。私人仓库需要收费，而公共仓库免费，并且不限制数量。而&lt;code&gt;Github&lt;/code&gt;最棒的地方就是多人协作。也就是开源程序，人人都能为代码提交修改。像Linux内核、Node.js 这些著名的程序都在&lt;code&gt;Github&lt;/code&gt;上托管包括&lt;code&gt;Jekyll&lt;/code&gt;。而且在&lt;code&gt;Github&lt;/code&gt;上还能找到很多有意思的项目。所以先注册一个&lt;code&gt;Github&lt;/code&gt;帐号吧。
完成了帐号注册后就能创建仓库了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lin-h.github.io/assets/jekyll/create-a-repository.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;创建的仓库名称必须是username.github.io，其中username就是你的用户名。Description可填可不填。
创建完成之后，就可以把代码上传上去了，这时就需要使用git工具了&lt;/p&gt;

&lt;h2&gt;git 版本控制工具&lt;/h2&gt;

&lt;p&gt;可以在&lt;a href=&quot;http://www.git-scm.com/downloads&quot;&gt;这里&lt;/a&gt;下载。所谓版本控制系统也就是存放有每个版本的代码。每次修改后的代码commit后会自动记录为一个版本。使用版本控制的好处就是任何时候都可以把修改错误的代码恢复至任一个版本。避免了代码保存了之后无法恢复。&lt;/p&gt;

&lt;p&gt;下载安装&lt;code&gt;git&lt;/code&gt;并添加到PATH中之后，打开命令行，切换到我们之前新建的MyBlog目录中并运行&lt;code&gt;git init .&lt;/code&gt;将当前目录初始化成一个&lt;code&gt;git&lt;/code&gt;仓库其中&lt;code&gt;.&lt;/code&gt;代表当前目录。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;E:\Project\MyBlog&amp;gt;git init .
Initialized empty Git repository in E:/Project/MyBlog/.git/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到新建的是一个空的仓库，运行命令&lt;code&gt;git status&lt;/code&gt;(下面的所有命令都是在MyBlog目录中运行)查看当前仓库的状态。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;E:\Project\MyBlog&amp;gt;git status
On branch master

Initial commit

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        .gitignore
        _config.yml
        _includes/
        _layouts/
        _posts/
        _sass/
        about.md
        css/
        feed.xml
        index.html

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到仓库检测到了变动，Untracked files为没有被记录的文件。运行命令&lt;code&gt;git add -A&lt;/code&gt;记录所有发生变动的文件。然后再运行一次&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;E:\Project\MyBlog&amp;gt;git status
On branch master

Initial commit

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

        new file:   .gitignore
        new file:   _config.yml
        new file:   _includes/footer.html
        new file:   _includes/head.html
        new file:   _includes/header.html
        new file:   _layouts/default.html
        new file:   _layouts/page.html
        new file:   _layouts/post.html
        new file:   _posts/2015-04-10-welcome-to-jekyll.markdown
        new file:   _sass/_base.scss
        new file:   _sass/_layout.scss
        new file:   _sass/_syntax-highlighting.scss
        new file:   about.md
        new file:   css/main.scss
        new file:   feed.xml
        new file:   index.html

E:\Project\MyBlog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到输出的第5行&lt;code&gt;Changes to be committed&lt;/code&gt;表明这些文件可以被commit了，一旦commit后文件的修改就会被记录到仓库中，并自动生成一个新版本。运行&lt;code&gt;git commit -m &amp;quot;add all the file to repository&amp;quot;&lt;/code&gt;。其中commit命令必须有&lt;code&gt;-m&lt;/code&gt;参数并跟着一个字符串，用于说明该commit做了什么变动，字符串可以是中文。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;E:\Project\MyBlog&amp;gt;git commit -m &quot;add all the file to repository&quot;
[master (root-commit) e0954d0] add all the file to repository
 16 files changed, 807 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 _config.yml
 create mode 100644 _includes/footer.html
 create mode 100644 _includes/head.html
 create mode 100644 _includes/header.html
 create mode 100644 _layouts/default.html
 create mode 100644 _layouts/page.html
 create mode 100644 _layouts/post.html
 create mode 100644 _posts/2015-04-10-welcome-to-jekyll.markdown
 create mode 100644 _sass/_base.scss
 create mode 100644 _sass/_layout.scss
 create mode 100644 _sass/_syntax-highlighting.scss
 create mode 100644 about.md
 create mode 100644 css/main.scss
 create mode 100644 feed.xml
 create mode 100644 index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样所有的变动都记录到仓库中了: )。注意&lt;code&gt;[master (root-commit) e0954d0]&lt;/code&gt;每一次commit都会生成一个序号类似&lt;code&gt;e0954d0&lt;/code&gt;，就像版本号的ID，若要恢复到以前的版本就需要使用这个序号。&lt;/p&gt;

&lt;p&gt;做好了&lt;code&gt;git&lt;/code&gt;仓库就可以把它上传到&lt;code&gt;Github&lt;/code&gt;上发布到网上了。&lt;/p&gt;

&lt;h2&gt;上传到Github&lt;/h2&gt;

&lt;p&gt;首先需要设置远程仓库的地址(即在你的Github账号中创建的仓库的地址)。在网页上打开你之前创建的仓库。在页面右侧找到该仓库的URL(建议先点击SSH切换到SSH链接，方便以后添加SSH KEY)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lin-h.github.io/assets/jekyll/where-to-clone.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;在命令行中运行&lt;code&gt;git remote add origin &amp;lt;server&amp;gt;&lt;/code&gt;其中&lt;server&gt;就是你的远程仓库的地址，origin为仓库名字(可以改为其他的名字)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：Github解析静态页面所使用的就是Jekyll所以你可以直接上传网站的源代码到远程仓库的master分支中，或将源代码上传到其他分支如source中，把最终生成的网站代码(_site文件夹中的内容)上传到master分支中。分开两个分支的好处是你可以现在本地使用Jekyll插件，Jekyll插件包括自动归档，分类等等功能，然后将生成的网站上传到master分支。因为Github出于安全考虑禁止使用插件。接下去的教程将代码上传至两个分支。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;将网站源代码和生成的代码上传到两个分支。需要现在命令行中将当前目录切换至&lt;code&gt;MyBlog&lt;/code&gt;中的&lt;code&gt;_site&lt;/code&gt;文件夹中。重复上面的&lt;code&gt;git&lt;/code&gt;命令将&lt;code&gt;_site&lt;/code&gt;文件夹变成另一个&lt;code&gt;git&lt;/code&gt;仓库，并添加远程仓库(为同一个远程仓库地址)。在命令行中运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git push origin master &lt;span class=&quot;c&quot;&gt;#master 即为上传分支的名字，若远程仓库中还没有该分支，则会被创建&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的在&lt;code&gt;MyBlog&lt;/code&gt;目录中运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git push origin &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#将源代码上传到source分支，便于分开管理&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后在&lt;code&gt;Github&lt;/code&gt;网站上打开你的远程仓库，应该可以看到两个分支&lt;img src=&quot;https://lin-h.github.io/assets/jekyll/two-branch.png&quot; alt=&quot;&quot;&gt;这时你打开http://username.github.io就能看到你的网站(username为你的用户名)已经发布到网上了: )&lt;/p&gt;

&lt;h3&gt;参考页面&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;下载 Ruby - Ruby 官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot;&gt;Home &amp;middot; Run Jekyll on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oneclick/rubyinstaller/wiki/Development-Kit&quot;&gt;Development Kit · oneclick/rubyinstaller Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bootcss.com/p/git-guide/&quot;&gt;git 使用简易指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Apr 2015 04:32:46 +0800</pubDate>
        <link>https://lin-h.github.io/jekyll/2015/04/10/build-personal-blog-with-jekyll-on-github.html</link>
        <guid isPermaLink="true">https://lin-h.github.io/jekyll/2015/04/10/build-personal-blog-with-jekyll-on-github.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
